//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `MainVideo.mp4`.
    static let mainVideoMp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "MainVideo", pathExtension: "mp4")
    
    /// `bundle.url(forResource: "MainVideo", withExtension: "mp4")`
    static func mainVideoMp4(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mainVideoMp4
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 100 images.
  struct image {
    /// Image `Cat_Activism`.
    static let cat_Activism = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Activism")
    /// Image `Cat_Animals`.
    static let cat_Animals = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Animals")
    /// Image `Cat_Cars`.
    static let cat_Cars = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Cars")
    /// Image `Cat_Comedy`.
    static let cat_Comedy = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Comedy")
    /// Image `Cat_Entertainment`.
    static let cat_Entertainment = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Entertainment")
    /// Image `Cat_Film`.
    static let cat_Film = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Film")
    /// Image `Cat_Gaming`.
    static let cat_Gaming = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Gaming")
    /// Image `Cat_Help`.
    static let cat_Help = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Help")
    /// Image `Cat_Music`.
    static let cat_Music = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Music")
    /// Image `Cat_News`.
    static let cat_News = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_News")
    /// Image `Cat_Other`.
    static let cat_Other = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Other")
    /// Image `Cat_People`.
    static let cat_People = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_People")
    /// Image `Cat_Sport`.
    static let cat_Sport = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Sport")
    /// Image `Cat_Travel`.
    static let cat_Travel = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Travel")
    /// Image `Email`.
    static let email = Rswift.ImageResource(bundle: R.hostingBundle, name: "Email")
    /// Image `RegisterScreen`.
    static let registerScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "RegisterScreen")
    /// Image `Smile`.
    static let smile = Rswift.ImageResource(bundle: R.hostingBundle, name: "Smile")
    /// Image `attach`.
    static let attach = Rswift.ImageResource(bundle: R.hostingBundle, name: "attach")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `blackdefault`.
    static let blackdefault = Rswift.ImageResource(bundle: R.hostingBundle, name: "blackdefault")
    /// Image `bubble`.
    static let bubble = Rswift.ImageResource(bundle: R.hostingBundle, name: "bubble")
    /// Image `cameraAttach`.
    static let cameraAttach = Rswift.ImageResource(bundle: R.hostingBundle, name: "cameraAttach")
    /// Image `checkBox`.
    static let checkBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkBox")
    /// Image `colorAttach`.
    static let colorAttach = Rswift.ImageResource(bundle: R.hostingBundle, name: "colorAttach")
    /// Image `contactAttach`.
    static let contactAttach = Rswift.ImageResource(bundle: R.hostingBundle, name: "contactAttach")
    /// Image `emailIcon`.
    static let emailIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "emailIcon")
    /// Image `facebookIcon`.
    static let facebookIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebookIcon")
    /// Image `googleIcon`.
    static let googleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "googleIcon")
    /// Image `ic_action_AddVideo`.
    static let ic_action_AddVideo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_AddVideo")
    /// Image `ic_action_Import`.
    static let ic_action_Import = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_Import")
    /// Image `ic_action_add_a_photo`.
    static let ic_action_add_a_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_add_a_photo")
    /// Image `ic_action_add_photo_alternate`.
    static let ic_action_add_photo_alternate = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_add_photo_alternate")
    /// Image `ic_action_add`.
    static let ic_action_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_add")
    /// Image `ic_action_arrow_down_sign`.
    static let ic_action_arrow_down_sign = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_arrow_down_sign")
    /// Image `ic_action_attachmentFile`.
    static let ic_action_attachmentFile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_attachmentFile")
    /// Image `ic_action_check_mark`.
    static let ic_action_check_mark = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_check_mark")
    /// Image `ic_action_close`.
    static let ic_action_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_close")
    /// Image `ic_action_download_stop`.
    static let ic_action_download_stop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_download_stop")
    /// Image `ic_action_download`.
    static let ic_action_download = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_download")
    /// Image `ic_action_drag`.
    static let ic_action_drag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_drag")
    /// Image `ic_action_ic_back`.
    static let ic_action_ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_ic_back")
    /// Image `ic_action_ic_fav`.
    static let ic_action_ic_fav = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_ic_fav")
    /// Image `ic_action_ic_fullscreen_expand`.
    static let ic_action_ic_fullscreen_expand = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_ic_fullscreen_expand")
    /// Image `ic_action_ic_fullscreen_skrink`.
    static let ic_action_ic_fullscreen_skrink = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_ic_fullscreen_skrink")
    /// Image `ic_action_key_circular`.
    static let ic_action_key_circular = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_key_circular")
    /// Image `ic_action_login_button`.
    static let ic_action_login_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_login_button")
    /// Image `ic_action_logout`.
    static let ic_action_logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_logout")
    /// Image `ic_action_more`.
    static let ic_action_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_more")
    /// Image `ic_action_notifcation_phone`.
    static let ic_action_notifcation_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_notifcation_phone")
    /// Image `ic_action_notification`.
    static let ic_action_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_notification")
    /// Image `ic_action_play_button`.
    static let ic_action_play_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_play_button")
    /// Image `ic_action_search`.
    static let ic_action_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_search")
    /// Image `ic_action_send`.
    static let ic_action_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_send")
    /// Image `ic_action_share`.
    static let ic_action_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_share")
    /// Image `ic_action_telephone`.
    static let ic_action_telephone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_telephone")
    /// Image `ic_action_upload`.
    static let ic_action_upload = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_upload")
    /// Image `ic_action_video`.
    static let ic_action_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_video")
    /// Image `ic_add`.
    static let ic_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add")
    /// Image `ic_checked_red`.
    static let ic_checked_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checked_red")
    /// Image `ic_contacts`.
    static let ic_contacts = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_contacts")
    /// Image `ic_edit`.
    static let ic_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit")
    /// Image `ic_email`.
    static let ic_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email")
    /// Image `ic_facebook_logo`.
    static let ic_facebook_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_facebook_logo")
    /// Image `ic_favorite_filled`.
    static let ic_favorite_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favorite_filled")
    /// Image `ic_google_plus`.
    static let ic_google_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_google_plus")
    /// Image `ic_instagram_logo`.
    static let ic_instagram_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_instagram_logo")
    /// Image `ic_tab_home`.
    static let ic_tab_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_home")
    /// Image `ic_tab_more`.
    static let ic_tab_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_more")
    /// Image `ic_tab_mychannel`.
    static let ic_tab_mychannel = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_mychannel")
    /// Image `ic_tab_subcription`.
    static let ic_tab_subcription = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_subcription")
    /// Image `ic_tab_trending`.
    static let ic_tab_trending = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_trending")
    /// Image `ic_translation_settings`.
    static let ic_translation_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_translation_settings")
    /// Image `ic_twitter`.
    static let ic_twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_twitter")
    /// Image `ic_uplodeimage`.
    static let ic_uplodeimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_uplodeimage")
    /// Image `ic_user`.
    static let ic_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user")
    /// Image `ic_vk`.
    static let ic_vk = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vk")
    /// Image `ic_warning_po`.
    static let ic_warning_po = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_warning_po")
    /// Image `ic_youtube_logo`.
    static let ic_youtube_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_youtube_logo")
    /// Image `icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon")
    /// Image `imageAttach`.
    static let imageAttach = Rswift.ImageResource(bundle: R.hostingBundle, name: "imageAttach")
    /// Image `lib_liked`.
    static let lib_liked = Rswift.ImageResource(bundle: R.hostingBundle, name: "lib_liked")
    /// Image `lib_playlists`.
    static let lib_playlists = Rswift.ImageResource(bundle: R.hostingBundle, name: "lib_playlists")
    /// Image `lib_recentlywatched`.
    static let lib_recentlywatched = Rswift.ImageResource(bundle: R.hostingBundle, name: "lib_recentlywatched")
    /// Image `lib_subscriptions`.
    static let lib_subscriptions = Rswift.ImageResource(bundle: R.hostingBundle, name: "lib_subscriptions")
    /// Image `lib_watchlater`.
    static let lib_watchlater = Rswift.ImageResource(bundle: R.hostingBundle, name: "lib_watchlater")
    /// Image `logInScreen`.
    static let logInScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "logInScreen")
    /// Image `loginscreen`.
    static let loginscreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginscreen")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `logolight`.
    static let logolight = Rswift.ImageResource(bundle: R.hostingBundle, name: "logolight")
    /// Image `mainLogo`.
    static let mainLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "mainLogo")
    /// Image `maxresdefault`.
    static let maxresdefault = Rswift.ImageResource(bundle: R.hostingBundle, name: "maxresdefault")
    /// Image `messengerhhh`.
    static let messengerhhh = Rswift.ImageResource(bundle: R.hostingBundle, name: "messengerhhh")
    /// Image `microphone`.
    static let microphone = Rswift.ImageResource(bundle: R.hostingBundle, name: "microphone")
    /// Image `no_profile_image_circle`.
    static let no_profile_image_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_profile_image_circle")
    /// Image `no_profile_image`.
    static let no_profile_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_profile_image")
    /// Image `passIcon`.
    static let passIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "passIcon")
    /// Image `splashScreen`.
    static let splashScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "splashScreen")
    /// Image `splashscreen`.
    static let splashscreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "splashscreen")
    /// Image `unCheckBox`.
    static let unCheckBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "unCheckBox")
    /// Image `userIcon`.
    static let userIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "userIcon")
    
    /// `UIImage(named: "Cat_Activism", bundle: ..., traitCollection: ...)`
    static func cat_Activism(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Activism, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Animals", bundle: ..., traitCollection: ...)`
    static func cat_Animals(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Animals, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Cars", bundle: ..., traitCollection: ...)`
    static func cat_Cars(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Cars, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Comedy", bundle: ..., traitCollection: ...)`
    static func cat_Comedy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Comedy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Entertainment", bundle: ..., traitCollection: ...)`
    static func cat_Entertainment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Entertainment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Film", bundle: ..., traitCollection: ...)`
    static func cat_Film(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Film, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Gaming", bundle: ..., traitCollection: ...)`
    static func cat_Gaming(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Gaming, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Help", bundle: ..., traitCollection: ...)`
    static func cat_Help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Help, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Music", bundle: ..., traitCollection: ...)`
    static func cat_Music(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Music, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_News", bundle: ..., traitCollection: ...)`
    static func cat_News(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_News, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Other", bundle: ..., traitCollection: ...)`
    static func cat_Other(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Other, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_People", bundle: ..., traitCollection: ...)`
    static func cat_People(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_People, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Sport", bundle: ..., traitCollection: ...)`
    static func cat_Sport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Sport, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Travel", bundle: ..., traitCollection: ...)`
    static func cat_Travel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Travel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Email", bundle: ..., traitCollection: ...)`
    static func email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "RegisterScreen", bundle: ..., traitCollection: ...)`
    static func registerScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.registerScreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Smile", bundle: ..., traitCollection: ...)`
    static func smile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "attach", bundle: ..., traitCollection: ...)`
    static func attach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attach, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "blackdefault", bundle: ..., traitCollection: ...)`
    static func blackdefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blackdefault, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bubble", bundle: ..., traitCollection: ...)`
    static func bubble(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bubble, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cameraAttach", bundle: ..., traitCollection: ...)`
    static func cameraAttach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraAttach, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkBox", bundle: ..., traitCollection: ...)`
    static func checkBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkBox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "colorAttach", bundle: ..., traitCollection: ...)`
    static func colorAttach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.colorAttach, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "contactAttach", bundle: ..., traitCollection: ...)`
    static func contactAttach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactAttach, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "emailIcon", bundle: ..., traitCollection: ...)`
    static func emailIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emailIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "facebookIcon", bundle: ..., traitCollection: ...)`
    static func facebookIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "googleIcon", bundle: ..., traitCollection: ...)`
    static func googleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_AddVideo", bundle: ..., traitCollection: ...)`
    static func ic_action_AddVideo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_AddVideo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_Import", bundle: ..., traitCollection: ...)`
    static func ic_action_Import(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_Import, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_add", bundle: ..., traitCollection: ...)`
    static func ic_action_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_add_a_photo", bundle: ..., traitCollection: ...)`
    static func ic_action_add_a_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_add_a_photo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_add_photo_alternate", bundle: ..., traitCollection: ...)`
    static func ic_action_add_photo_alternate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_add_photo_alternate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_arrow_down_sign", bundle: ..., traitCollection: ...)`
    static func ic_action_arrow_down_sign(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_arrow_down_sign, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_attachmentFile", bundle: ..., traitCollection: ...)`
    static func ic_action_attachmentFile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_attachmentFile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_check_mark", bundle: ..., traitCollection: ...)`
    static func ic_action_check_mark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_check_mark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_close", bundle: ..., traitCollection: ...)`
    static func ic_action_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_download", bundle: ..., traitCollection: ...)`
    static func ic_action_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_download, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_download_stop", bundle: ..., traitCollection: ...)`
    static func ic_action_download_stop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_download_stop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_drag", bundle: ..., traitCollection: ...)`
    static func ic_action_drag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_drag, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_ic_back", bundle: ..., traitCollection: ...)`
    static func ic_action_ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_ic_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_ic_fav", bundle: ..., traitCollection: ...)`
    static func ic_action_ic_fav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_ic_fav, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_ic_fullscreen_expand", bundle: ..., traitCollection: ...)`
    static func ic_action_ic_fullscreen_expand(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_ic_fullscreen_expand, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_ic_fullscreen_skrink", bundle: ..., traitCollection: ...)`
    static func ic_action_ic_fullscreen_skrink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_ic_fullscreen_skrink, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_key_circular", bundle: ..., traitCollection: ...)`
    static func ic_action_key_circular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_key_circular, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_login_button", bundle: ..., traitCollection: ...)`
    static func ic_action_login_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_login_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_logout", bundle: ..., traitCollection: ...)`
    static func ic_action_logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_logout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_more", bundle: ..., traitCollection: ...)`
    static func ic_action_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_notifcation_phone", bundle: ..., traitCollection: ...)`
    static func ic_action_notifcation_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_notifcation_phone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_notification", bundle: ..., traitCollection: ...)`
    static func ic_action_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_notification, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_play_button", bundle: ..., traitCollection: ...)`
    static func ic_action_play_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_play_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_search", bundle: ..., traitCollection: ...)`
    static func ic_action_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_send", bundle: ..., traitCollection: ...)`
    static func ic_action_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_share", bundle: ..., traitCollection: ...)`
    static func ic_action_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_telephone", bundle: ..., traitCollection: ...)`
    static func ic_action_telephone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_telephone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_upload", bundle: ..., traitCollection: ...)`
    static func ic_action_upload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_upload, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_video", bundle: ..., traitCollection: ...)`
    static func ic_action_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_video, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add", bundle: ..., traitCollection: ...)`
    static func ic_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_checked_red", bundle: ..., traitCollection: ...)`
    static func ic_checked_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checked_red, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_contacts", bundle: ..., traitCollection: ...)`
    static func ic_contacts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_contacts, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_edit", bundle: ..., traitCollection: ...)`
    static func ic_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_email", bundle: ..., traitCollection: ...)`
    static func ic_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_facebook_logo", bundle: ..., traitCollection: ...)`
    static func ic_facebook_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_facebook_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_favorite_filled", bundle: ..., traitCollection: ...)`
    static func ic_favorite_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favorite_filled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_google_plus", bundle: ..., traitCollection: ...)`
    static func ic_google_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_google_plus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_instagram_logo", bundle: ..., traitCollection: ...)`
    static func ic_instagram_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_instagram_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_home", bundle: ..., traitCollection: ...)`
    static func ic_tab_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_more", bundle: ..., traitCollection: ...)`
    static func ic_tab_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_mychannel", bundle: ..., traitCollection: ...)`
    static func ic_tab_mychannel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_mychannel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_subcription", bundle: ..., traitCollection: ...)`
    static func ic_tab_subcription(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_subcription, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_trending", bundle: ..., traitCollection: ...)`
    static func ic_tab_trending(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_trending, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_translation_settings", bundle: ..., traitCollection: ...)`
    static func ic_translation_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_translation_settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_twitter", bundle: ..., traitCollection: ...)`
    static func ic_twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_twitter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_uplodeimage", bundle: ..., traitCollection: ...)`
    static func ic_uplodeimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_uplodeimage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_user", bundle: ..., traitCollection: ...)`
    static func ic_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_vk", bundle: ..., traitCollection: ...)`
    static func ic_vk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vk, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_warning_po", bundle: ..., traitCollection: ...)`
    static func ic_warning_po(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_warning_po, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_youtube_logo", bundle: ..., traitCollection: ...)`
    static func ic_youtube_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_youtube_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "imageAttach", bundle: ..., traitCollection: ...)`
    static func imageAttach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageAttach, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lib_liked", bundle: ..., traitCollection: ...)`
    static func lib_liked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lib_liked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lib_playlists", bundle: ..., traitCollection: ...)`
    static func lib_playlists(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lib_playlists, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lib_recentlywatched", bundle: ..., traitCollection: ...)`
    static func lib_recentlywatched(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lib_recentlywatched, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lib_subscriptions", bundle: ..., traitCollection: ...)`
    static func lib_subscriptions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lib_subscriptions, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lib_watchlater", bundle: ..., traitCollection: ...)`
    static func lib_watchlater(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lib_watchlater, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logInScreen", bundle: ..., traitCollection: ...)`
    static func logInScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logInScreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loginscreen", bundle: ..., traitCollection: ...)`
    static func loginscreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginscreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logolight", bundle: ..., traitCollection: ...)`
    static func logolight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logolight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mainLogo", bundle: ..., traitCollection: ...)`
    static func mainLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "maxresdefault", bundle: ..., traitCollection: ...)`
    static func maxresdefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maxresdefault, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "messengerhhh", bundle: ..., traitCollection: ...)`
    static func messengerhhh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messengerhhh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "microphone", bundle: ..., traitCollection: ...)`
    static func microphone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.microphone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "no_profile_image", bundle: ..., traitCollection: ...)`
    static func no_profile_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_profile_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "no_profile_image_circle", bundle: ..., traitCollection: ...)`
    static func no_profile_image_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_profile_image_circle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "passIcon", bundle: ..., traitCollection: ...)`
    static func passIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.passIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splashScreen", bundle: ..., traitCollection: ...)`
    static func splashScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashScreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splashscreen", bundle: ..., traitCollection: ...)`
    static func splashscreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashscreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unCheckBox", bundle: ..., traitCollection: ...)`
    static func unCheckBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unCheckBox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "userIcon", bundle: ..., traitCollection: ...)`
    static func userIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userIcon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `CustomTextField`.
    static let customTextField = _R.nib._CustomTextField()
    
    /// `UINib(name: "CustomTextField", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customTextField) instead")
    static func customTextField(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customTextField)
    }
    
    static func customTextField(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.customTextField.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `Home_CollectionCell2`.
    static let home_CollectionCell2: Rswift.ReuseIdentifier<Home_CollectionCell2> = Rswift.ReuseIdentifier(identifier: "Home_CollectionCell2")
    /// Reuse identifier `Home_CollectionCell3`.
    static let home_CollectionCell3: Rswift.ReuseIdentifier<Home_CollectionCell3> = Rswift.ReuseIdentifier(identifier: "Home_CollectionCell3")
    /// Reuse identifier `Home_CollectionCell`.
    static let home_CollectionCell: Rswift.ReuseIdentifier<Home_CollectionCell> = Rswift.ReuseIdentifier(identifier: "Home_CollectionCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Tabbar`.
    static let tabbar = _R.storyboard.tabbar()
    
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Tabbar", bundle: ...)`
    static func tabbar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tabbar)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CustomTextField.validate()
    }
    
    struct _CustomTextField: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CustomTextField"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "log_in_user_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'log_in_user_icon' is used in nib 'CustomTextField', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try auth.validate()
      try launchScreen.validate()
      try tabbar.validate()
    }
    
    struct auth: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let introDuctionVC = StoryboardViewControllerResource<IntroDuctionVC>(identifier: "IntroDuctionVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let name = "Auth"
      let registerVC = StoryboardViewControllerResource<RegisterVC>(identifier: "RegisterVC")
      
      func introDuctionVC(_: Void = ()) -> IntroDuctionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: introDuctionVC)
      }
      
      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }
      
      func registerVC(_: Void = ()) -> RegisterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "emailIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'emailIcon' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebookIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebookIcon' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "googleIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'googleIcon' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logInScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logInScreen' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mainLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mainLogo' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "passIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'passIcon' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unCheckBox", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unCheckBox' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "userIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userIcon' is used in storyboard 'Auth', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.auth().introDuctionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'introDuctionVC' could not be loaded from storyboard 'Auth' as 'IntroDuctionVC'.") }
        if _R.storyboard.auth().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Auth' as 'LoginVC'.") }
        if _R.storyboard.auth().registerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerVC' could not be loaded from storyboard 'Auth' as 'RegisterVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "splashScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splashScreen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct tabbar: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabbarVC
      
      let bundle = R.hostingBundle
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let name = "Tabbar"
      let tabbar = StoryboardViewControllerResource<TabbarVC>(identifier: "Tabbar")
      
      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }
      
      func tabbar(_: Void = ()) -> TabbarVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabbar)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Cat_Comedy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Cat_Comedy' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Cat_Film", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Cat_Film' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_check_mark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_check_mark' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_home' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_mychannel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_mychannel' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_trending", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_trending' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lib_liked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lib_liked' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        }
        if _R.storyboard.tabbar().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Tabbar' as 'HomeVC'.") }
        if _R.storyboard.tabbar().tabbar() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabbar' could not be loaded from storyboard 'Tabbar' as 'TabbarVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
