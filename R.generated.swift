//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `MainVideo.mp4`.
    static let mainVideoMp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "MainVideo", pathExtension: "mp4")
    
    /// `bundle.url(forResource: "MainVideo", withExtension: "mp4")`
    static func mainVideoMp4(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mainVideoMp4
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 148 images.
  struct image {
    /// Image `Cat_Activism`.
    static let cat_Activism = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Activism")
    /// Image `Cat_Animals`.
    static let cat_Animals = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Animals")
    /// Image `Cat_Cars`.
    static let cat_Cars = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Cars")
    /// Image `Cat_Comedy`.
    static let cat_Comedy = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Comedy")
    /// Image `Cat_Entertainment`.
    static let cat_Entertainment = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Entertainment")
    /// Image `Cat_Film`.
    static let cat_Film = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Film")
    /// Image `Cat_Gaming`.
    static let cat_Gaming = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Gaming")
    /// Image `Cat_Help`.
    static let cat_Help = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Help")
    /// Image `Cat_Music`.
    static let cat_Music = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Music")
    /// Image `Cat_News`.
    static let cat_News = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_News")
    /// Image `Cat_Other`.
    static let cat_Other = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Other")
    /// Image `Cat_People`.
    static let cat_People = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_People")
    /// Image `Cat_Sport`.
    static let cat_Sport = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Sport")
    /// Image `Cat_Travel`.
    static let cat_Travel = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat_Travel")
    /// Image `Email`.
    static let email = Rswift.ImageResource(bundle: R.hostingBundle, name: "Email")
    /// Image `RegisterScreen`.
    static let registerScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "RegisterScreen")
    /// Image `Smile`.
    static let smile = Rswift.ImageResource(bundle: R.hostingBundle, name: "Smile")
    /// Image `_ionicons_svg_ios-bulb`.
    static let _ionicons_svg_iosBulb = Rswift.ImageResource(bundle: R.hostingBundle, name: "_ionicons_svg_ios-bulb")
    /// Image `add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "add")
    /// Image `addto`.
    static let addto = Rswift.ImageResource(bundle: R.hostingBundle, name: "addto")
    /// Image `attach`.
    static let attach = Rswift.ImageResource(bundle: R.hostingBundle, name: "attach")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `bell`.
    static let bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "bell")
    /// Image `blackdefault`.
    static let blackdefault = Rswift.ImageResource(bundle: R.hostingBundle, name: "blackdefault")
    /// Image `bubble`.
    static let bubble = Rswift.ImageResource(bundle: R.hostingBundle, name: "bubble")
    /// Image `calendar`.
    static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar")
    /// Image `camera-grey`.
    static let cameraGrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera-grey")
    /// Image `cameraAttach`.
    static let cameraAttach = Rswift.ImageResource(bundle: R.hostingBundle, name: "cameraAttach")
    /// Image `camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera")
    /// Image `chat`.
    static let chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat")
    /// Image `checkBox`.
    static let checkBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkBox")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `checked-1`.
    static let checked1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "checked-1")
    /// Image `checked`.
    static let checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "checked")
    /// Image `checkmark`.
    static let checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkmark")
    /// Image `colorAttach`.
    static let colorAttach = Rswift.ImageResource(bundle: R.hostingBundle, name: "colorAttach")
    /// Image `contactAttach`.
    static let contactAttach = Rswift.ImageResource(bundle: R.hostingBundle, name: "contactAttach")
    /// Image `dislike`.
    static let dislike = Rswift.ImageResource(bundle: R.hostingBundle, name: "dislike")
    /// Image `dislikeblue-1`.
    static let dislikeblue1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dislikeblue-1")
    /// Image `downarrow`.
    static let downarrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "downarrow")
    /// Image `download`.
    static let download = Rswift.ImageResource(bundle: R.hostingBundle, name: "download")
    /// Image `downloaded`.
    static let downloaded = Rswift.ImageResource(bundle: R.hostingBundle, name: "downloaded")
    /// Image `email-1`.
    static let email1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "email-1")
    /// Image `emailIcon`.
    static let emailIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "emailIcon")
    /// Image `facebookIcon`.
    static let facebookIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebookIcon")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `firstname`.
    static let firstname = Rswift.ImageResource(bundle: R.hostingBundle, name: "firstname")
    /// Image `googleIcon`.
    static let googleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "googleIcon")
    /// Image `googlePlus`.
    static let googlePlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "googlePlus")
    /// Image `heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart")
    /// Image `ic_action_AddVideo`.
    static let ic_action_AddVideo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_AddVideo")
    /// Image `ic_action_Import`.
    static let ic_action_Import = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_Import")
    /// Image `ic_action_add_a_photo`.
    static let ic_action_add_a_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_add_a_photo")
    /// Image `ic_action_add_photo_alternate`.
    static let ic_action_add_photo_alternate = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_add_photo_alternate")
    /// Image `ic_action_add`.
    static let ic_action_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_add")
    /// Image `ic_action_arrow_down_sign`.
    static let ic_action_arrow_down_sign = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_arrow_down_sign")
    /// Image `ic_action_attachmentFile`.
    static let ic_action_attachmentFile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_attachmentFile")
    /// Image `ic_action_check_mark`.
    static let ic_action_check_mark = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_check_mark")
    /// Image `ic_action_close`.
    static let ic_action_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_close")
    /// Image `ic_action_download_stop`.
    static let ic_action_download_stop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_download_stop")
    /// Image `ic_action_download`.
    static let ic_action_download = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_download")
    /// Image `ic_action_drag`.
    static let ic_action_drag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_drag")
    /// Image `ic_action_ic_back`.
    static let ic_action_ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_ic_back")
    /// Image `ic_action_ic_fav`.
    static let ic_action_ic_fav = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_ic_fav")
    /// Image `ic_action_ic_fullscreen_expand`.
    static let ic_action_ic_fullscreen_expand = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_ic_fullscreen_expand")
    /// Image `ic_action_ic_fullscreen_skrink`.
    static let ic_action_ic_fullscreen_skrink = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_ic_fullscreen_skrink")
    /// Image `ic_action_key_circular`.
    static let ic_action_key_circular = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_key_circular")
    /// Image `ic_action_login_button`.
    static let ic_action_login_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_login_button")
    /// Image `ic_action_logout`.
    static let ic_action_logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_logout")
    /// Image `ic_action_more`.
    static let ic_action_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_more")
    /// Image `ic_action_notifcation_phone`.
    static let ic_action_notifcation_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_notifcation_phone")
    /// Image `ic_action_notification`.
    static let ic_action_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_notification")
    /// Image `ic_action_play_button`.
    static let ic_action_play_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_play_button")
    /// Image `ic_action_search`.
    static let ic_action_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_search")
    /// Image `ic_action_send`.
    static let ic_action_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_send")
    /// Image `ic_action_share`.
    static let ic_action_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_share")
    /// Image `ic_action_telephone`.
    static let ic_action_telephone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_telephone")
    /// Image `ic_action_upload`.
    static let ic_action_upload = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_upload")
    /// Image `ic_action_video`.
    static let ic_action_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_video")
    /// Image `ic_add`.
    static let ic_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add")
    /// Image `ic_airplay_white`.
    static let ic_airplay_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_airplay_white")
    /// Image `ic_checked_red`.
    static let ic_checked_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checked_red")
    /// Image `ic_contacts`.
    static let ic_contacts = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_contacts")
    /// Image `ic_edit`.
    static let ic_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit")
    /// Image `ic_email`.
    static let ic_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email")
    /// Image `ic_facebook_logo`.
    static let ic_facebook_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_facebook_logo")
    /// Image `ic_favorite_filled`.
    static let ic_favorite_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favorite_filled")
    /// Image `ic_google_plus`.
    static let ic_google_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_google_plus")
    /// Image `ic_instagram_logo`.
    static let ic_instagram_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_instagram_logo")
    /// Image `ic_pause_circle_filled`.
    static let ic_pause_circle_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pause_circle_filled")
    /// Image `ic_play_circle_filled`.
    static let ic_play_circle_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_play_circle_filled")
    /// Image `ic_tab_articles`.
    static let ic_tab_articles = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_articles")
    /// Image `ic_tab_home`.
    static let ic_tab_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_home")
    /// Image `ic_tab_more`.
    static let ic_tab_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_more")
    /// Image `ic_tab_mychannel`.
    static let ic_tab_mychannel = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_mychannel")
    /// Image `ic_tab_subcription`.
    static let ic_tab_subcription = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_subcription")
    /// Image `ic_tab_trending`.
    static let ic_tab_trending = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_trending")
    /// Image `ic_translation_settings`.
    static let ic_translation_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_translation_settings")
    /// Image `ic_twitter`.
    static let ic_twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_twitter")
    /// Image `ic_uplodeimage`.
    static let ic_uplodeimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_uplodeimage")
    /// Image `ic_user`.
    static let ic_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user")
    /// Image `ic_vk`.
    static let ic_vk = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vk")
    /// Image `ic_warning_po`.
    static let ic_warning_po = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_warning_po")
    /// Image `ic_youtube_logo`.
    static let ic_youtube_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_youtube_logo")
    /// Image `icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon")
    /// Image `imageAttach`.
    static let imageAttach = Rswift.ImageResource(bundle: R.hostingBundle, name: "imageAttach")
    /// Image `image`.
    static let image = Rswift.ImageResource(bundle: R.hostingBundle, name: "image")
    /// Image `lib_liked`.
    static let lib_liked = Rswift.ImageResource(bundle: R.hostingBundle, name: "lib_liked")
    /// Image `lib_playlists`.
    static let lib_playlists = Rswift.ImageResource(bundle: R.hostingBundle, name: "lib_playlists")
    /// Image `lib_recentlywatched`.
    static let lib_recentlywatched = Rswift.ImageResource(bundle: R.hostingBundle, name: "lib_recentlywatched")
    /// Image `lib_share`.
    static let lib_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "lib_share")
    /// Image `lib_subscriptions`.
    static let lib_subscriptions = Rswift.ImageResource(bundle: R.hostingBundle, name: "lib_subscriptions")
    /// Image `lib_watchlater`.
    static let lib_watchlater = Rswift.ImageResource(bundle: R.hostingBundle, name: "lib_watchlater")
    /// Image `like`.
    static let like = Rswift.ImageResource(bundle: R.hostingBundle, name: "like")
    /// Image `likeblue`.
    static let likeblue = Rswift.ImageResource(bundle: R.hostingBundle, name: "likeblue")
    /// Image `logInScreen`.
    static let logInScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "logInScreen")
    /// Image `loginPerson`.
    static let loginPerson = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginPerson")
    /// Image `loginscreen`.
    static let loginscreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginscreen")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `logolight`.
    static let logolight = Rswift.ImageResource(bundle: R.hostingBundle, name: "logolight")
    /// Image `mainLogo`.
    static let mainLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "mainLogo")
    /// Image `male`.
    static let male = Rswift.ImageResource(bundle: R.hostingBundle, name: "male")
    /// Image `maxresdefault-1`.
    static let maxresdefault1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "maxresdefault-1")
    /// Image `maxresdefault`.
    static let maxresdefault = Rswift.ImageResource(bundle: R.hostingBundle, name: "maxresdefault")
    /// Image `messengerhhh`.
    static let messengerhhh = Rswift.ImageResource(bundle: R.hostingBundle, name: "messengerhhh")
    /// Image `microphone`.
    static let microphone = Rswift.ImageResource(bundle: R.hostingBundle, name: "microphone")
    /// Image `no_profile_image_circle`.
    static let no_profile_image_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_profile_image_circle")
    /// Image `no_profile_image`.
    static let no_profile_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_profile_image")
    /// Image `passIcon`.
    static let passIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "passIcon")
    /// Image `pause`.
    static let pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "pause")
    /// Image `play`.
    static let play = Rswift.ImageResource(bundle: R.hostingBundle, name: "play")
    /// Image `radio_button_off`.
    static let radio_button_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio_button_off")
    /// Image `radio_button_on`.
    static let radio_button_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio_button_on")
    /// Image `recently_watched`.
    static let recently_watched = Rswift.ImageResource(bundle: R.hostingBundle, name: "recently_watched")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `splashScreen`.
    static let splashScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "splashScreen")
    /// Image `splashscreen`.
    static let splashscreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "splashscreen")
    /// Image `time`.
    static let time = Rswift.ImageResource(bundle: R.hostingBundle, name: "time")
    /// Image `timer`.
    static let timer = Rswift.ImageResource(bundle: R.hostingBundle, name: "timer")
    /// Image `topvideos`.
    static let topvideos = Rswift.ImageResource(bundle: R.hostingBundle, name: "topvideos")
    /// Image `twitter`.
    static let twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "twitter")
    /// Image `unCheckBox`.
    static let unCheckBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "unCheckBox")
    /// Image `uncheked`.
    static let uncheked = Rswift.ImageResource(bundle: R.hostingBundle, name: "uncheked")
    /// Image `userIcon`.
    static let userIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "userIcon")
    /// Image `verified`.
    static let verified = Rswift.ImageResource(bundle: R.hostingBundle, name: "verified")
    /// Image `videocamera`.
    static let videocamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "videocamera")
    /// Image `watch_Later`.
    static let watch_Later = Rswift.ImageResource(bundle: R.hostingBundle, name: "watch_Later")
    
    /// `UIImage(named: "Cat_Activism", bundle: ..., traitCollection: ...)`
    static func cat_Activism(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Activism, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Animals", bundle: ..., traitCollection: ...)`
    static func cat_Animals(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Animals, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Cars", bundle: ..., traitCollection: ...)`
    static func cat_Cars(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Cars, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Comedy", bundle: ..., traitCollection: ...)`
    static func cat_Comedy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Comedy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Entertainment", bundle: ..., traitCollection: ...)`
    static func cat_Entertainment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Entertainment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Film", bundle: ..., traitCollection: ...)`
    static func cat_Film(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Film, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Gaming", bundle: ..., traitCollection: ...)`
    static func cat_Gaming(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Gaming, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Help", bundle: ..., traitCollection: ...)`
    static func cat_Help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Help, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Music", bundle: ..., traitCollection: ...)`
    static func cat_Music(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Music, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_News", bundle: ..., traitCollection: ...)`
    static func cat_News(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_News, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Other", bundle: ..., traitCollection: ...)`
    static func cat_Other(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Other, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_People", bundle: ..., traitCollection: ...)`
    static func cat_People(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_People, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Sport", bundle: ..., traitCollection: ...)`
    static func cat_Sport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Sport, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat_Travel", bundle: ..., traitCollection: ...)`
    static func cat_Travel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat_Travel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Email", bundle: ..., traitCollection: ...)`
    static func email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "RegisterScreen", bundle: ..., traitCollection: ...)`
    static func registerScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.registerScreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Smile", bundle: ..., traitCollection: ...)`
    static func smile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "_ionicons_svg_ios-bulb", bundle: ..., traitCollection: ...)`
    static func _ionicons_svg_iosBulb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image._ionicons_svg_iosBulb, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "addto", bundle: ..., traitCollection: ...)`
    static func addto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addto, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "attach", bundle: ..., traitCollection: ...)`
    static func attach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attach, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bell", bundle: ..., traitCollection: ...)`
    static func bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bell, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "blackdefault", bundle: ..., traitCollection: ...)`
    static func blackdefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blackdefault, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bubble", bundle: ..., traitCollection: ...)`
    static func bubble(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bubble, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "calendar", bundle: ..., traitCollection: ...)`
    static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "camera-grey", bundle: ..., traitCollection: ...)`
    static func cameraGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraGrey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cameraAttach", bundle: ..., traitCollection: ...)`
    static func cameraAttach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraAttach, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat", bundle: ..., traitCollection: ...)`
    static func chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkBox", bundle: ..., traitCollection: ...)`
    static func checkBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkBox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checked", bundle: ..., traitCollection: ...)`
    static func checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checked-1", bundle: ..., traitCollection: ...)`
    static func checked1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checked1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkmark", bundle: ..., traitCollection: ...)`
    static func checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkmark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "colorAttach", bundle: ..., traitCollection: ...)`
    static func colorAttach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.colorAttach, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "contactAttach", bundle: ..., traitCollection: ...)`
    static func contactAttach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactAttach, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dislike", bundle: ..., traitCollection: ...)`
    static func dislike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dislike, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dislikeblue-1", bundle: ..., traitCollection: ...)`
    static func dislikeblue1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dislikeblue1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "downarrow", bundle: ..., traitCollection: ...)`
    static func downarrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downarrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "download", bundle: ..., traitCollection: ...)`
    static func download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.download, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "downloaded", bundle: ..., traitCollection: ...)`
    static func downloaded(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downloaded, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "email-1", bundle: ..., traitCollection: ...)`
    static func email1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "emailIcon", bundle: ..., traitCollection: ...)`
    static func emailIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emailIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "facebookIcon", bundle: ..., traitCollection: ...)`
    static func facebookIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "firstname", bundle: ..., traitCollection: ...)`
    static func firstname(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.firstname, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "googleIcon", bundle: ..., traitCollection: ...)`
    static func googleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "googlePlus", bundle: ..., traitCollection: ...)`
    static func googlePlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googlePlus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_AddVideo", bundle: ..., traitCollection: ...)`
    static func ic_action_AddVideo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_AddVideo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_Import", bundle: ..., traitCollection: ...)`
    static func ic_action_Import(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_Import, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_add", bundle: ..., traitCollection: ...)`
    static func ic_action_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_add_a_photo", bundle: ..., traitCollection: ...)`
    static func ic_action_add_a_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_add_a_photo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_add_photo_alternate", bundle: ..., traitCollection: ...)`
    static func ic_action_add_photo_alternate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_add_photo_alternate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_arrow_down_sign", bundle: ..., traitCollection: ...)`
    static func ic_action_arrow_down_sign(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_arrow_down_sign, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_attachmentFile", bundle: ..., traitCollection: ...)`
    static func ic_action_attachmentFile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_attachmentFile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_check_mark", bundle: ..., traitCollection: ...)`
    static func ic_action_check_mark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_check_mark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_close", bundle: ..., traitCollection: ...)`
    static func ic_action_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_download", bundle: ..., traitCollection: ...)`
    static func ic_action_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_download, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_download_stop", bundle: ..., traitCollection: ...)`
    static func ic_action_download_stop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_download_stop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_drag", bundle: ..., traitCollection: ...)`
    static func ic_action_drag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_drag, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_ic_back", bundle: ..., traitCollection: ...)`
    static func ic_action_ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_ic_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_ic_fav", bundle: ..., traitCollection: ...)`
    static func ic_action_ic_fav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_ic_fav, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_ic_fullscreen_expand", bundle: ..., traitCollection: ...)`
    static func ic_action_ic_fullscreen_expand(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_ic_fullscreen_expand, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_ic_fullscreen_skrink", bundle: ..., traitCollection: ...)`
    static func ic_action_ic_fullscreen_skrink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_ic_fullscreen_skrink, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_key_circular", bundle: ..., traitCollection: ...)`
    static func ic_action_key_circular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_key_circular, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_login_button", bundle: ..., traitCollection: ...)`
    static func ic_action_login_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_login_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_logout", bundle: ..., traitCollection: ...)`
    static func ic_action_logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_logout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_more", bundle: ..., traitCollection: ...)`
    static func ic_action_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_notifcation_phone", bundle: ..., traitCollection: ...)`
    static func ic_action_notifcation_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_notifcation_phone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_notification", bundle: ..., traitCollection: ...)`
    static func ic_action_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_notification, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_play_button", bundle: ..., traitCollection: ...)`
    static func ic_action_play_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_play_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_search", bundle: ..., traitCollection: ...)`
    static func ic_action_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_send", bundle: ..., traitCollection: ...)`
    static func ic_action_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_share", bundle: ..., traitCollection: ...)`
    static func ic_action_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_telephone", bundle: ..., traitCollection: ...)`
    static func ic_action_telephone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_telephone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_upload", bundle: ..., traitCollection: ...)`
    static func ic_action_upload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_upload, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_video", bundle: ..., traitCollection: ...)`
    static func ic_action_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_video, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add", bundle: ..., traitCollection: ...)`
    static func ic_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_airplay_white", bundle: ..., traitCollection: ...)`
    static func ic_airplay_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_airplay_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_checked_red", bundle: ..., traitCollection: ...)`
    static func ic_checked_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checked_red, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_contacts", bundle: ..., traitCollection: ...)`
    static func ic_contacts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_contacts, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_edit", bundle: ..., traitCollection: ...)`
    static func ic_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_email", bundle: ..., traitCollection: ...)`
    static func ic_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_facebook_logo", bundle: ..., traitCollection: ...)`
    static func ic_facebook_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_facebook_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_favorite_filled", bundle: ..., traitCollection: ...)`
    static func ic_favorite_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favorite_filled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_google_plus", bundle: ..., traitCollection: ...)`
    static func ic_google_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_google_plus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_instagram_logo", bundle: ..., traitCollection: ...)`
    static func ic_instagram_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_instagram_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pause_circle_filled", bundle: ..., traitCollection: ...)`
    static func ic_pause_circle_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pause_circle_filled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_play_circle_filled", bundle: ..., traitCollection: ...)`
    static func ic_play_circle_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_play_circle_filled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_articles", bundle: ..., traitCollection: ...)`
    static func ic_tab_articles(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_articles, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_home", bundle: ..., traitCollection: ...)`
    static func ic_tab_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_more", bundle: ..., traitCollection: ...)`
    static func ic_tab_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_mychannel", bundle: ..., traitCollection: ...)`
    static func ic_tab_mychannel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_mychannel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_subcription", bundle: ..., traitCollection: ...)`
    static func ic_tab_subcription(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_subcription, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_trending", bundle: ..., traitCollection: ...)`
    static func ic_tab_trending(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_trending, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_translation_settings", bundle: ..., traitCollection: ...)`
    static func ic_translation_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_translation_settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_twitter", bundle: ..., traitCollection: ...)`
    static func ic_twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_twitter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_uplodeimage", bundle: ..., traitCollection: ...)`
    static func ic_uplodeimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_uplodeimage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_user", bundle: ..., traitCollection: ...)`
    static func ic_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_vk", bundle: ..., traitCollection: ...)`
    static func ic_vk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vk, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_warning_po", bundle: ..., traitCollection: ...)`
    static func ic_warning_po(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_warning_po, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_youtube_logo", bundle: ..., traitCollection: ...)`
    static func ic_youtube_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_youtube_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image", bundle: ..., traitCollection: ...)`
    static func image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "imageAttach", bundle: ..., traitCollection: ...)`
    static func imageAttach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageAttach, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lib_liked", bundle: ..., traitCollection: ...)`
    static func lib_liked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lib_liked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lib_playlists", bundle: ..., traitCollection: ...)`
    static func lib_playlists(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lib_playlists, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lib_recentlywatched", bundle: ..., traitCollection: ...)`
    static func lib_recentlywatched(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lib_recentlywatched, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lib_share", bundle: ..., traitCollection: ...)`
    static func lib_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lib_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lib_subscriptions", bundle: ..., traitCollection: ...)`
    static func lib_subscriptions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lib_subscriptions, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lib_watchlater", bundle: ..., traitCollection: ...)`
    static func lib_watchlater(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lib_watchlater, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "like", bundle: ..., traitCollection: ...)`
    static func like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "likeblue", bundle: ..., traitCollection: ...)`
    static func likeblue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeblue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logInScreen", bundle: ..., traitCollection: ...)`
    static func logInScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logInScreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loginPerson", bundle: ..., traitCollection: ...)`
    static func loginPerson(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginPerson, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loginscreen", bundle: ..., traitCollection: ...)`
    static func loginscreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginscreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logolight", bundle: ..., traitCollection: ...)`
    static func logolight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logolight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mainLogo", bundle: ..., traitCollection: ...)`
    static func mainLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "male", bundle: ..., traitCollection: ...)`
    static func male(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.male, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "maxresdefault", bundle: ..., traitCollection: ...)`
    static func maxresdefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maxresdefault, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "maxresdefault-1", bundle: ..., traitCollection: ...)`
    static func maxresdefault1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maxresdefault1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "messengerhhh", bundle: ..., traitCollection: ...)`
    static func messengerhhh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messengerhhh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "microphone", bundle: ..., traitCollection: ...)`
    static func microphone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.microphone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "no_profile_image", bundle: ..., traitCollection: ...)`
    static func no_profile_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_profile_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "no_profile_image_circle", bundle: ..., traitCollection: ...)`
    static func no_profile_image_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_profile_image_circle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "passIcon", bundle: ..., traitCollection: ...)`
    static func passIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.passIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pause", bundle: ..., traitCollection: ...)`
    static func pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pause, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "play", bundle: ..., traitCollection: ...)`
    static func play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "radio_button_off", bundle: ..., traitCollection: ...)`
    static func radio_button_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio_button_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "radio_button_on", bundle: ..., traitCollection: ...)`
    static func radio_button_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio_button_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "recently_watched", bundle: ..., traitCollection: ...)`
    static func recently_watched(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recently_watched, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splashScreen", bundle: ..., traitCollection: ...)`
    static func splashScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashScreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splashscreen", bundle: ..., traitCollection: ...)`
    static func splashscreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashscreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "time", bundle: ..., traitCollection: ...)`
    static func time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.time, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "timer", bundle: ..., traitCollection: ...)`
    static func timer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "topvideos", bundle: ..., traitCollection: ...)`
    static func topvideos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topvideos, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "twitter", bundle: ..., traitCollection: ...)`
    static func twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twitter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unCheckBox", bundle: ..., traitCollection: ...)`
    static func unCheckBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unCheckBox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "uncheked", bundle: ..., traitCollection: ...)`
    static func uncheked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uncheked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "userIcon", bundle: ..., traitCollection: ...)`
    static func userIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "verified", bundle: ..., traitCollection: ...)`
    static func verified(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.verified, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "videocamera", bundle: ..., traitCollection: ...)`
    static func videocamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videocamera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "watch_Later", bundle: ..., traitCollection: ...)`
    static func watch_Later(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watch_Later, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `CoverA`.
    static let coverA = _R.nib._CoverA()
    /// Nib `CustomTextField`.
    static let customTextField = _R.nib._CustomTextField()
    /// Nib `HomeXibCell`.
    static let homeXibCell = _R.nib._HomeXibCell()
    
    /// `UINib(name: "CoverA", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.coverA) instead")
    static func coverA(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.coverA)
    }
    
    /// `UINib(name: "CustomTextField", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customTextField) instead")
    static func customTextField(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customTextField)
    }
    
    /// `UINib(name: "HomeXibCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeXibCell) instead")
    static func homeXibCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeXibCell)
    }
    
    static func coverA(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoverA? {
      return R.nib.coverA.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoverA
    }
    
    static func customTextField(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.customTextField.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func homeXibCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Home_CollectionCell? {
      return R.nib.homeXibCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Home_CollectionCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 27 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ArticlesComment_TableCell`.
    static let articlesComment_TableCell: Rswift.ReuseIdentifier<ArticlesComment_TableCell> = Rswift.ReuseIdentifier(identifier: "ArticlesComment_TableCell")
    /// Reuse identifier `Articles_TableCell`.
    static let articles_TableCell: Rswift.ReuseIdentifier<Articles_TableCell> = Rswift.ReuseIdentifier(identifier: "Articles_TableCell")
    /// Reuse identifier `ChangeLanguage_TableCell`.
    static let changeLanguage_TableCell: Rswift.ReuseIdentifier<ChangeLanguage_TableCell> = Rswift.ReuseIdentifier(identifier: "ChangeLanguage_TableCell")
    /// Reuse identifier `Chats_TableCell`.
    static let chats_TableCell: Rswift.ReuseIdentifier<Chats_TableCell> = Rswift.ReuseIdentifier(identifier: "Chats_TableCell")
    /// Reuse identifier `Home_CollectionCell2`.
    static let home_CollectionCell2: Rswift.ReuseIdentifier<Home_CollectionCell2> = Rswift.ReuseIdentifier(identifier: "Home_CollectionCell2")
    /// Reuse identifier `Home_CollectionCell3`.
    static let home_CollectionCell3: Rswift.ReuseIdentifier<Home_CollectionCell3> = Rswift.ReuseIdentifier(identifier: "Home_CollectionCell3")
    /// Reuse identifier `Home_CollectionCell4`.
    static let home_CollectionCell4: Rswift.ReuseIdentifier<Home_CollectionCell4> = Rswift.ReuseIdentifier(identifier: "Home_CollectionCell4")
    /// Reuse identifier `Home_CollectionCell`.
    static let home_CollectionCell: Rswift.ReuseIdentifier<Home_CollectionCell> = Rswift.ReuseIdentifier(identifier: "Home_CollectionCell")
    /// Reuse identifier `Iibrary_TableCell`.
    static let iibrary_TableCell: Rswift.ReuseIdentifier<Iibrary_TableCell> = Rswift.ReuseIdentifier(identifier: "Iibrary_TableCell")
    /// Reuse identifier `LibrarySelect_TableCell`.
    static let librarySelect_TableCell: Rswift.ReuseIdentifier<LibrarySelect_TableCell> = Rswift.ReuseIdentifier(identifier: "LibrarySelect_TableCell")
    /// Reuse identifier `Notifications_TableCell`.
    static let notifications_TableCell: Rswift.ReuseIdentifier<Notifications_TableCell> = Rswift.ReuseIdentifier(identifier: "Notifications_TableCell")
    /// Reuse identifier `PlayVideo_Comments_TableCell`.
    static let playVideo_Comments_TableCell: Rswift.ReuseIdentifier<PlayVideo_Comments_TableCell> = Rswift.ReuseIdentifier(identifier: "PlayVideo_Comments_TableCell")
    /// Reuse identifier `PlayVideo_TableCell`.
    static let playVideo_TableCell: Rswift.ReuseIdentifier<PlayVideo_TableCell> = Rswift.ReuseIdentifier(identifier: "PlayVideo_TableCell")
    /// Reuse identifier `PlaylistVideos_CollectionCell`.
    static let playlistVideos_CollectionCell: Rswift.ReuseIdentifier<PlaylistVideos_CollectionCell> = Rswift.ReuseIdentifier(identifier: "PlaylistVideos_CollectionCell")
    /// Reuse identifier `Playlist_TableCell`.
    static let playlist_TableCell: Rswift.ReuseIdentifier<Playlist_TableCell> = Rswift.ReuseIdentifier(identifier: "Playlist_TableCell")
    /// Reuse identifier `Replies_TableCell`.
    static let replies_TableCell: Rswift.ReuseIdentifier<Replies_TableCell> = Rswift.ReuseIdentifier(identifier: "Replies_TableCell")
    /// Reuse identifier `Search_TableCell`.
    static let search_TableCell: Rswift.ReuseIdentifier<Search_TableCell> = Rswift.ReuseIdentifier(identifier: "Search_TableCell")
    /// Reuse identifier `SelectAPlaylist_TableCell`.
    static let selectAPlaylist_TableCell: Rswift.ReuseIdentifier<SelectAPlaylist_TableCell> = Rswift.ReuseIdentifier(identifier: "SelectAPlaylist_TableCell")
    /// Reuse identifier `SubscribeChannel_TableCell`.
    static let subscribeChannel_TableCell: Rswift.ReuseIdentifier<SubscribeChannel_TableCell> = Rswift.ReuseIdentifier(identifier: "SubscribeChannel_TableCell")
    /// Reuse identifier `Subscription_CollectionCell`.
    static let subscription_CollectionCell: Rswift.ReuseIdentifier<Subscription_CollectionCell> = Rswift.ReuseIdentifier(identifier: "Subscription_CollectionCell")
    /// Reuse identifier `Subscription_TableCell`.
    static let subscription_TableCell: Rswift.ReuseIdentifier<Subscription_TableCell> = Rswift.ReuseIdentifier(identifier: "Subscription_TableCell")
    /// Reuse identifier `TopAndLatest_TableCell`.
    static let topAndLatest_TableCell: Rswift.ReuseIdentifier<TopAndLatest_TableCell> = Rswift.ReuseIdentifier(identifier: "TopAndLatest_TableCell")
    /// Reuse identifier `Trending_TableCell`.
    static let trending_TableCell: Rswift.ReuseIdentifier<Trending_TableCell> = Rswift.ReuseIdentifier(identifier: "Trending_TableCell")
    /// Reuse identifier `UserChat_TableCell1`.
    static let userChat_TableCell1: Rswift.ReuseIdentifier<UserChat_TableCell1> = Rswift.ReuseIdentifier(identifier: "UserChat_TableCell1")
    /// Reuse identifier `UserChat_TableCell2`.
    static let userChat_TableCell2: Rswift.ReuseIdentifier<UserChat_TableCell2> = Rswift.ReuseIdentifier(identifier: "UserChat_TableCell2")
    /// Reuse identifier `Videos_TableCell`.
    static let videos_TableCell: Rswift.ReuseIdentifier<Videos_TableCell> = Rswift.ReuseIdentifier(identifier: "Videos_TableCell")
    /// Reuse identifier `WatchLater_TableCell`.
    static let watchLater_TableCell: Rswift.ReuseIdentifier<WatchLater_TableCell> = Rswift.ReuseIdentifier(identifier: "WatchLater_TableCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LoggedInTabbar`.
    static let loggedInTabbar = _R.storyboard.loggedInTabbar()
    /// Storyboard `Tabbar`.
    static let tabbar = _R.storyboard.tabbar()
    
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "LoggedInTabbar", bundle: ...)`
    static func loggedInTabbar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.loggedInTabbar)
    }
    
    /// `UIStoryboard(name: "Tabbar", bundle: ...)`
    static func tabbar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tabbar)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.auth` struct is generated, and contains static references to 16 localization keys.
    struct auth {
      /// ru translation: Continue with Google
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static let rgvWcDufNormalTitle = Rswift.StringResource(key: "Rgv-Wc-duf.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "en"], comment: nil)
      /// ru translation: Dont worry type your email here and we will recover it for you.
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static let l5X1VmUText = Rswift.StringResource(key: "1L5-x1-VmU.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "en"], comment: nil)
      /// ru translation: Forget password ?
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static let zQoFD9aBNormalTitle = Rswift.StringResource(key: "ZQo-fD-9aB.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "en"], comment: nil)
      /// ru translation: Forgot your password
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static let jHT6QX2SText = Rswift.StringResource(key: "jHT-6Q-X2S.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "en"], comment: nil)
      /// ru translation: I agree to the
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static let eX10sBpeText = Rswift.StringResource(key: "eX1-0s-Bpe.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "en"], comment: nil)
      /// ru translation: LOGIN
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static let ssEfXBiNormalTitle = Rswift.StringResource(key: "8ss-Ef-XBi.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "en"], comment: nil)
      /// ru translation: Let's get started!
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static let cZmGm1Text = Rswift.StringResource(key: "47c-zm-Gm1.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "en"], comment: nil)
      /// ru translation: Login
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static let knnDJOtXNormalTitle = Rswift.StringResource(key: "knn-dJ-OtX.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "en"], comment: nil)
      /// ru translation: REGISTER
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static let a5Z5PI2YNormalTitle = Rswift.StringResource(key: "a5Z-5P-I2Y.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "en"], comment: nil)
      /// ru translation: REGISTER
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static let bdRWbCCPNormalTitle = Rswift.StringResource(key: "BdR-wb-CCP.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "en"], comment: nil)
      /// ru translation: REGISTER
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static let gxyPbDBFNormalTitle = Rswift.StringResource(key: "GXY-pb-DBF.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "en"], comment: nil)
      /// ru translation: SKIP
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static let zaRGF1TzNormalTitle = Rswift.StringResource(key: "ZaR-GF-1Tz.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "en"], comment: nil)
      /// ru translation: Send
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static let kHrUKSmBNormalTitle = Rswift.StringResource(key: "kHr-uK-smB.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "en"], comment: nil)
      /// ru translation: Terms Of service
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static let wy31V1FENormalTitle = Rswift.StringResource(key: "WY3-1V-1FE.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "en"], comment: nil)
      /// ru translation: and
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static let pVDcSbdText = Rswift.StringResource(key: "5pV-dc-sbd.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "en"], comment: nil)
      /// ru translation: privacy Polcy
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static let eiOWmNDUNormalTitle = Rswift.StringResource(key: "EiO-Wm-nDU.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "en"], comment: nil)
      
      /// ru translation: Continue with Google
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static func rgvWcDufNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Rgv-Wc-duf.normalTitle", tableName: "Auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Dont worry type your email here and we will recover it for you.
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static func l5X1VmUText(_: Void = ()) -> String {
        return NSLocalizedString("1L5-x1-VmU.text", tableName: "Auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Forget password ?
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static func zQoFD9aBNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("ZQo-fD-9aB.normalTitle", tableName: "Auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Forgot your password
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static func jHT6QX2SText(_: Void = ()) -> String {
        return NSLocalizedString("jHT-6Q-X2S.text", tableName: "Auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: I agree to the
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static func eX10sBpeText(_: Void = ()) -> String {
        return NSLocalizedString("eX1-0s-Bpe.text", tableName: "Auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: LOGIN
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static func ssEfXBiNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("8ss-Ef-XBi.normalTitle", tableName: "Auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Let's get started!
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static func cZmGm1Text(_: Void = ()) -> String {
        return NSLocalizedString("47c-zm-Gm1.text", tableName: "Auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Login
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static func knnDJOtXNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("knn-dJ-OtX.normalTitle", tableName: "Auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: REGISTER
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static func a5Z5PI2YNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("a5Z-5P-I2Y.normalTitle", tableName: "Auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: REGISTER
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static func bdRWbCCPNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("BdR-wb-CCP.normalTitle", tableName: "Auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: REGISTER
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static func gxyPbDBFNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("GXY-pb-DBF.normalTitle", tableName: "Auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: SKIP
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static func zaRGF1TzNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("ZaR-GF-1Tz.normalTitle", tableName: "Auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Send
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static func kHrUKSmBNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("kHr-uK-smB.normalTitle", tableName: "Auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Terms Of service
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static func wy31V1FENormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("WY3-1V-1FE.normalTitle", tableName: "Auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: and
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static func pVDcSbdText(_: Void = ()) -> String {
        return NSLocalizedString("5pV-dc-sbd.text", tableName: "Auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: privacy Polcy
      /// 
      /// Locales: ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, en
      static func eiOWmNDUNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("EiO-Wm-nDU.normalTitle", tableName: "Auth", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.loggedInTabbar` struct is generated, and contains static references to 200 localization keys.
    struct loggedInTabbar {
      /// en translation:               Help
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let vZkEeBNormalTitle = Rswift.StringResource(key: "53v-zk-EeB.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation:               Settings
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let bDqIrUnBNormalTitle = Rswift.StringResource(key: "BDq-ir-unB.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation:              Terms & privacy policy
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let qb8wDkrNormalTitle = Rswift.StringResource(key: "6qb-8w-Dkr.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation:       SUBSCRIBE
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let hcwJbWdeNormalTitle = Rswift.StringResource(key: "Hcw-Jb-Wde.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation:     SUBSCRIBE
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let eev0bFffNormalTitle = Rswift.StringResource(key: "Eev-0b-fff.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let e1vIoZRyText = Rswift.StringResource(key: "e1v-Io-ZRy.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let iz31aPcUText = Rswift.StringResource(key: "Iz3-1a-PcU.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let kxmIHSV6Text = Rswift.StringResource(key: "Kxm-IH-SV6.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let lUsBXEbvText = Rswift.StringResource(key: "lUs-bX-Ebv.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let nhSIdZhjText = Rswift.StringResource(key: "nhS-Id-zhj.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let r0YYuAK3Text = Rswift.StringResource(key: "R0Y-yu-AK3.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let wcKmTlOText = Rswift.StringResource(key: "4WC-Km-tlO.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let xzDKT0QText = Rswift.StringResource(key: "6xz-dK-t0Q.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let ze2oP6SText = Rswift.StringResource(key: "3ze-2o-P6S.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let zi0GbTu8Text = Rswift.StringResource(key: "ZI0-gb-Tu8.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let zvszIabText = Rswift.StringResource(key: "5ZV-SZ-iab.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 1
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let kOoER9gBText = Rswift.StringResource(key: "KOo-ER-9gB.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 2 Days ago
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let dQfL6LJAText = Rswift.StringResource(key: "dQf-l6-lJA.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 2 Views
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let gnUTbAluText = Rswift.StringResource(key: "GnU-Tb-alu.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let edyVL79OText = Rswift.StringResource(key: "edy-VL-79O.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let fEuWGHAPText = Rswift.StringResource(key: "fEu-wG-HAP.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let fSNK73ZText = Rswift.StringResource(key: "9fS-NK-73Z.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let fxDAE1FText = Rswift.StringResource(key: "2Fx-dA-e1F.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let hlTo6DJText = Rswift.StringResource(key: "5Hl-to-6DJ.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let iuDJuGwaText = Rswift.StringResource(key: "IuD-Ju-Gwa.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let izgTzXLWText = Rswift.StringResource(key: "izg-Tz-XLW.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let pwMQOGWrText = Rswift.StringResource(key: "pwM-QO-GWr.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let qquE0KwWText = Rswift.StringResource(key: "Qqu-E0-kwW.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let sxgWO3G1Text = Rswift.StringResource(key: "sxg-WO-3G1.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let tBa7Text = Rswift.StringResource(key: "583-1T-ba7.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let wmCDhSaxText = Rswift.StringResource(key: "WmC-dh-sax.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let zjQSmCzSText = Rswift.StringResource(key: "zjQ-sm-czS.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let nDm2ZHeBText = Rswift.StringResource(key: "nDm-2Z-heB.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let uQLG9OppText = Rswift.StringResource(key: "uQL-g9-Opp.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let wEsTnVsHText = Rswift.StringResource(key: "WEs-tn-vsH.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let wURGCUGWText = Rswift.StringResource(key: "wUR-gC-uGW.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: 4 D
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let xcAMKL12Text = Rswift.StringResource(key: "xcA-MK-L12.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: A verification email has been sent to your email account.Please check
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let k23DM7CpText = Rswift.StringResource(key: "K23-dM-7Cp.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: ALIVE | CANADA 4K
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let eaXOFkyText = Rswift.StringResource(key: "0ea-xO-fky.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: About us
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let qm0MSSBeNormalTitle = Rswift.StringResource(key: "Qm0-mS-SBe.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Account and Profile
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let igoyrBxText = Rswift.StringResource(key: "4IG-OY-rBx.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Add To
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let ok47vAeIText = Rswift.StringResource(key: "Ok4-7v-AeI.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: All Channels
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let kvkJcHRCNormalTitle = Rswift.StringResource(key: "KVK-jc-hRC.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Are you sure you want to delete this account from PlayTube
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let nv4zPfjText = Rswift.StringResource(key: "7nv-4z-Pfj.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Are you sure you want to delete this playlist
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let isCyO3FText = Rswift.StringResource(key: "6is-Cy-o3F.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Are you sure you want to logout ?
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let wylRCGZjText = Rswift.StringResource(key: "wyl-rC-gZj.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Avatar & Cover
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let smKViCREText = Rswift.StringResource(key: "SmK-vi-cRE.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: CANCEL
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let bzLMnNl2NormalTitle = Rswift.StringResource(key: "BzL-Mn-Nl2.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: CANCEL
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let ecc3j4NhNormalTitle = Rswift.StringResource(key: "Ecc-3j-4Nh.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: CANCEL
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let l4GJ6XaaNormalTitle = Rswift.StringResource(key: "l4G-J6-xaa.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: CANCEL
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let o2NBrMeFNormalTitle = Rswift.StringResource(key: "O2N-br-meF.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: CANCEL
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let soffi4niNormalTitle = Rswift.StringResource(key: "SOF-fI-4ni.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: CANCEL
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let vhhTLEdwNormalTitle = Rswift.StringResource(key: "Vhh-TL-edw.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: CREATE NEW!
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let cKqAnQ14NormalTitle = Rswift.StringResource(key: "cKq-An-q14.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Category
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let kn4A9XTtText = Rswift.StringResource(key: "kn4-a9-XTt.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Change Image Avatar
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let nci1EGdcText = Rswift.StringResource(key: "nci-1E-Gdc.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Change Image Cover
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let wzzAQUgfText = Rswift.StringResource(key: "Wzz-aQ-ugf.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Change your password
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let hoqTsOS5Text = Rswift.StringResource(key: "hoq-Ts-oS5.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Clear Cache
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let cz5NhCF5Text = Rswift.StringResource(key: "Cz5-Nh-cF5.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Clear videos watched while signed out on this device. This will also clear your watch history.
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let fVh2gJ1JText = Rswift.StringResource(key: "fVh-2g-j1J.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Clear watched history
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let pg1IDUtqText = Rswift.StringResource(key: "Pg1-ID-utq.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Current Password
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let ghiG92d2Placeholder = Rswift.StringResource(key: "Ghi-g9-2d2.placeholder", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let cv2CPC9dText = Rswift.StringResource(key: "cv2-CP-c9d.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let fmjJ7ZFXText = Rswift.StringResource(key: "fmj-j7-zFX.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let j1S8ZokText = Rswift.StringResource(key: "0j1-s8-Zok.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let peoCk6uzText = Rswift.StringResource(key: "peo-ck-6uz.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Deandoughouz
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let iHi1C9fhText = Rswift.StringResource(key: "IHi-1C-9fh.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Deandoughouz
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let rdnHtMDxText = Rswift.StringResource(key: "Rdn-ht-MDx.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Delete Account
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let engEjBoqNormalTitle = Rswift.StringResource(key: "eng-ej-Boq.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Display your app Language
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let ffYZUYkIText = Rswift.StringResource(key: "ffY-ZU-ykI.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Don't have any videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let cJH7qCtLText = Rswift.StringResource(key: "cJH-7q-CtL.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Don't have any videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let hKjUEZlrText = Rswift.StringResource(key: "HKj-UE-zlr.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: EDIT
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let fKKVWH9cNormalTitle = Rswift.StringResource(key: "fKK-VW-h9c.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Email
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let wCO3KJ2dPlaceholder = Rswift.StringResource(key: "wCO-3K-J2d.placeholder", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Empty
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let cFUzYscText = Rswift.StringResource(key: "7cF-uz-Ysc.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Empty Playlist
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let bIXDRHzdText = Rswift.StringResource(key: "bIX-DR-hzd.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Empty Videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let nfllgr8tText = Rswift.StringResource(key: "NFL-lG-r8t.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Empty Videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let qWtNkTv6Text = Rswift.StringResource(key: "QWt-nk-tv6.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Empty Videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let stSCGIdpText = Rswift.StringResource(key: "stS-cG-idp.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Empty Videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let w9BFP3NRText = Rswift.StringResource(key: "w9B-FP-3NR.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Enjoy your favourite videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let e6zPhKm5Text = Rswift.StringResource(key: "e6z-Ph-Km5.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Enter My Channel
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let x4VW1NzeText = Rswift.StringResource(key: "X4V-W1-nze.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Female
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let vsVMNMO5Text = Rswift.StringResource(key: "vsV-MN-mO5.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: First Name
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let kXzTrPwPPlaceholder = Rswift.StringResource(key: "KXz-tr-PwP.placeholder", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: General
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let dMr40WI9Text = Rswift.StringResource(key: "DMr-40-wI9.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Go back and watch any video you want 
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let b2E7edText = Rswift.StringResource(key: "23B-2E-7ed.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Go back and watch any video you want 
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let yHkAiSywText = Rswift.StringResource(key: "yHk-ai-syw.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Help
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let l7w7kT5bNormalTitle = Rswift.StringResource(key: "L7w-7k-T5b.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: History & Privacy
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let xa95WBrxText = Rswift.StringResource(key: "xa9-5W-Brx.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let fuLLVObKText = Rswift.StringResource(key: "FuL-LV-obK.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let idrFtWJhText = Rswift.StringResource(key: "idr-ft-WJh.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let jksRXJYdText = Rswift.StringResource(key: "Jks-RX-JYd.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let k0V92FfsText = Rswift.StringResource(key: "k0V-92-ffs.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: LOGIN
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let dB4ZbGtjNormalTitle = Rswift.StringResource(key: "dB4-Zb-gtj.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let bMbAFNhfText = Rswift.StringResource(key: "bMb-aF-nhf.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let bSo0y8TNText = Rswift.StringResource(key: "bSo-0y-8TN.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let bUtWo0qaText = Rswift.StringResource(key: "bUt-Wo-0qa.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let bp8XiHText = Rswift.StringResource(key: "07B-P8-xiH.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let cB4SMAqyText = Rswift.StringResource(key: "cB4-sM-Aqy.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let cQFKdBk1Text = Rswift.StringResource(key: "cQF-Kd-bk1.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let cquVIXcbText = Rswift.StringResource(key: "cqu-VI-xcb.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let czEMDtrText = Rswift.StringResource(key: "2cz-eM-Dtr.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let dkv9THpeText = Rswift.StringResource(key: "Dkv-9T-Hpe.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let drHFDJcdText = Rswift.StringResource(key: "drH-fD-jcd.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let eILPP0e1Text = Rswift.StringResource(key: "eIL-pP-0e1.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let epFsHKXText = Rswift.StringResource(key: "5ep-fs-hKX.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let fcHwPimText = Rswift.StringResource(key: "9Fc-hw-pim.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let gbONZCdJText = Rswift.StringResource(key: "GbO-NZ-cdJ.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let iV68NMkText = Rswift.StringResource(key: "6iV-68-NMk.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let jEmQrCMzText = Rswift.StringResource(key: "jEm-qr-CMz.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let jyaEQJ6NText = Rswift.StringResource(key: "Jya-eQ-J6N.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let kEzIYZcNText = Rswift.StringResource(key: "KEz-IY-ZcN.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let l8OXETJxText = Rswift.StringResource(key: "l8O-xE-TJx.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let m0vOiBVZText = Rswift.StringResource(key: "M0v-Oi-bVZ.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let m9YXk4udText = Rswift.StringResource(key: "M9Y-Xk-4ud.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let mGNY87gfText = Rswift.StringResource(key: "mGN-Y8-7gf.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let mv3B1B1Text = Rswift.StringResource(key: "4MV-3B-1B1.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let nQGVLOsYText = Rswift.StringResource(key: "nQG-vL-osY.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let oqlHCD4KText = Rswift.StringResource(key: "oql-hC-d4K.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let oxIYNNoIText = Rswift.StringResource(key: "oxI-yN-noI.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let psSGuNaYText = Rswift.StringResource(key: "psS-gu-naY.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let q7qQCTV8Text = Rswift.StringResource(key: "Q7q-qC-TV8.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let qeDCjQsyText = Rswift.StringResource(key: "qeD-cj-Qsy.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let qtkhnsl1Text = Rswift.StringResource(key: "QTK-hN-SL1.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let qw4HlT8dText = Rswift.StringResource(key: "QW4-hl-t8d.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let rLs6JXzDText = Rswift.StringResource(key: "RLs-6J-xzD.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let rr8XQ63SText = Rswift.StringResource(key: "rr8-xQ-63S.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let sKQyITZText = Rswift.StringResource(key: "1sK-qy-iTZ.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let saiSrHwtText = Rswift.StringResource(key: "Sai-sr-Hwt.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let txGWjJHfText = Rswift.StringResource(key: "TxG-wj-jHf.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let ty6OBUDHText = Rswift.StringResource(key: "ty6-OB-UDH.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let uYsKvHevText = Rswift.StringResource(key: "UYs-kv-Hev.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let va3Y1J73Text = Rswift.StringResource(key: "Va3-Y1-j73.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let vqLxZfnText = Rswift.StringResource(key: "5VQ-Lx-Zfn.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let wh7U2QTtText = Rswift.StringResource(key: "Wh7-u2-QTt.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let xhAFa82IText = Rswift.StringResource(key: "xhA-fa-82I.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Language
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let tgB8oIkpText = Rswift.StringResource(key: "tgB-8o-Ikp.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Language
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let vGcNXJhyText = Rswift.StringResource(key: "VGc-nX-jhy.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Last Name
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let y4UFfAOmPlaceholder = Rswift.StringResource(key: "y4U-ff-aOm.placeholder", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Latest Videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let k6IiEw6NormalTitle = Rswift.StringResource(key: "9k6-ii-ew6.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Library
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let gId6NPKtTitle = Rswift.StringResource(key: "GId-6N-PKt.title", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Logout
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let aBSSfO4RNormalTitle = Rswift.StringResource(key: "aBS-sf-o4R.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Male
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let pd92x14aText = Rswift.StringResource(key: "pd9-2x-14a.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: More
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let q1EL3Cm5Title = Rswift.StringResource(key: "Q1E-l3-cm5.title", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: More
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let r66AZWPfTitle = Rswift.StringResource(key: "R66-aZ-WPf.title", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: New Password
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let nHENYKBBPlaceholder = Rswift.StringResource(key: "nHE-nY-KBB.placeholder", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Night Mode
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let wC7DJ68hText = Rswift.StringResource(key: "wC7-DJ-68h.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: No Replies
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let zus0vPOJText = Rswift.StringResource(key: "ZUS-0v-pOJ.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: No videos found for now!
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let akZE9XozText = Rswift.StringResource(key: "AkZ-E9-Xoz.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: No videos found for now!
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let gi5MwWKnText = Rswift.StringResource(key: "GI5-Mw-wKn.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: No videos found for now!
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let hCwBI95uText = Rswift.StringResource(key: "hCw-bI-95u.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: No videos found for now!
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let hWf8xUwXText = Rswift.StringResource(key: "hWf-8x-uwX.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: No videos found for now!
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let nlzyaIcEText = Rswift.StringResource(key: "NLZ-YA-IcE.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let aTrCCGTrNormalTitle = Rswift.StringResource(key: "aTr-CC-GTr.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let lzvRN2gaNormalTitle = Rswift.StringResource(key: "Lzv-rN-2ga.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let qzvTb7asNormalTitle = Rswift.StringResource(key: "qzv-tb-7as.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let ssHDw6NzNormalTitle = Rswift.StringResource(key: "ssH-Dw-6Nz.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Other
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let rkHNaYGtText = Rswift.StringResource(key: "rkH-na-YGt.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let ohfW1YjqText = Rswift.StringResource(key: "ohf-w1-yjq.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Pause watch history
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let hTvLHVShText = Rswift.StringResource(key: "HTv-lH-vSh.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: PlayTube
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let r5dT2Fq2Text = Rswift.StringResource(key: "R5d-T2-fq2.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Playlist name
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let bh78URMYPlaceholder = Rswift.StringResource(key: "bh7-8U-RMY.placeholder", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Please write a summary of what this video was about 
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let oVKDUW8iText = Rswift.StringResource(key: "oVK-dU-w8i.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Private
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let uLbQe3JEText = Rswift.StringResource(key: "ULb-qe-3JE.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Public
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let fblQJT9KText = Rswift.StringResource(key: "fbl-QJ-t9K.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Published on 
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let m2M8ActText = Rswift.StringResource(key: "0m2-M8-Act.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Repeat Password
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let yOKL5gPlaceholder = Rswift.StringResource(key: "35y-oK-l5g.placeholder", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Report This Video
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let dmBYd7RSText = Rswift.StringResource(key: "dmB-yd-7RS.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: SUBMIT
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let tgoXrRd7NormalTitle = Rswift.StringResource(key: "TGO-xr-Rd7.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Search
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let pgCJ63eFTitle = Rswift.StringResource(key: "PgC-J6-3eF.title", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Search
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let ucMHVDZZTitle = Rswift.StringResource(key: "UcM-hV-DZZ.title", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Select a Playlist
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let mSuAyNLWText = Rswift.StringResource(key: "MSu-Ay-nLW.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let azx6MRzIText = Rswift.StringResource(key: "Azx-6M-RzI.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Sign in to access video that you have liked or saved
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let fyQRjVybText = Rswift.StringResource(key: "FyQ-Rj-vyb.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Social LInks
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let fb1nSkpText = Rswift.StringResource(key: "9fb-1n-Skp.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Subscribe to your favorite channels to get notified about their lastest videos.
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let eScOF6mlText = Rswift.StringResource(key: "eSc-oF-6ml.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Subscribed
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let krxPD3MANormalTitle = Rswift.StringResource(key: "Krx-PD-3MA.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Support
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let iGREKT3dText = Rswift.StringResource(key: "iGR-eK-T3d.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Terms of use
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let oj9FnH2uNormalTitle = Rswift.StringResource(key: "OJ9-Fn-H2u.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Top Videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let pLnCIELxNormalTitle = Rswift.StringResource(key: "PLn-CI-eLx.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: UserName
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let adH04ItoText = Rswift.StringResource(key: "adH-04-Ito.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: UserName
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let lUMAqGZaText = Rswift.StringResource(key: "lUM-aq-GZa.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Username
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let gawDqRvlPlaceholder = Rswift.StringResource(key: "gaw-dq-Rvl.placeholder", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: View More
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let a8YO7XQiNormalTitle = Rswift.StringResource(key: "a8Y-o7-XQi.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Warning 
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let k9rBxX7HText = Rswift.StringResource(key: "K9r-Bx-X7H.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Warning 
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let skSZAH6GText = Rswift.StringResource(key: "SkS-ZA-H6G.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Warning 
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let uNBPtBZLText = Rswift.StringResource(key: "uNB-Pt-bZL.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Warning 
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let w8AFJO4Text = Rswift.StringResource(key: "1W8-aF-jO4.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Watch Later
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let jr2OhRNfText = Rswift.StringResource(key: "Jr2-oh-rNf.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: You need to login first
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let rmZbFRWText = Rswift.StringResource(key: "4rm-Zb-fRW.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: Your notifications live here
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let ae4LuGIfText = Rswift.StringResource(key: "ae4-lu-gIf.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: albel
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let dt4FK0adText = Rswift.StringResource(key: "DT4-fK-0ad.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: comment Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let k5ZDTZWaText = Rswift.StringResource(key: "k5Z-dT-zWa.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: comment Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let wZJ0PlAText = Rswift.StringResource(key: "7wZ-j0-PlA.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: comment Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let yohCg9tnText = Rswift.StringResource(key: "Yoh-Cg-9tn.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: harisbutt
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let dhWSmP2JText = Rswift.StringResource(key: "DhW-Sm-P2J.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: harisbutt
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let tiJsYGAText = Rswift.StringResource(key: "4Ti-js-yGA.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: harisbutt
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let ynzCxU4JText = Rswift.StringResource(key: "ynz-Cx-U4J.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: share
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let m7AhPhNText = Rswift.StringResource(key: "4m7-Ah-phN.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      /// en translation: |
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static let yiM74XIuText = Rswift.StringResource(key: "yiM-74-XIu.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr", "es"], comment: nil)
      
      /// en translation:               Help
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func vZkEeBNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("53v-zk-EeB.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation:               Settings
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func bDqIrUnBNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("BDq-ir-unB.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation:              Terms & privacy policy
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func qb8wDkrNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("6qb-8w-Dkr.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation:       SUBSCRIBE
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func hcwJbWdeNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Hcw-Jb-Wde.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation:     SUBSCRIBE
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func eev0bFffNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Eev-0b-fff.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func e1vIoZRyText(_: Void = ()) -> String {
        return NSLocalizedString("e1v-Io-ZRy.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func iz31aPcUText(_: Void = ()) -> String {
        return NSLocalizedString("Iz3-1a-PcU.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func kxmIHSV6Text(_: Void = ()) -> String {
        return NSLocalizedString("Kxm-IH-SV6.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func lUsBXEbvText(_: Void = ()) -> String {
        return NSLocalizedString("lUs-bX-Ebv.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func nhSIdZhjText(_: Void = ()) -> String {
        return NSLocalizedString("nhS-Id-zhj.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func r0YYuAK3Text(_: Void = ()) -> String {
        return NSLocalizedString("R0Y-yu-AK3.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func wcKmTlOText(_: Void = ()) -> String {
        return NSLocalizedString("4WC-Km-tlO.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func xzDKT0QText(_: Void = ()) -> String {
        return NSLocalizedString("6xz-dK-t0Q.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func ze2oP6SText(_: Void = ()) -> String {
        return NSLocalizedString("3ze-2o-P6S.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func zi0GbTu8Text(_: Void = ()) -> String {
        return NSLocalizedString("ZI0-gb-Tu8.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 0
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func zvszIabText(_: Void = ()) -> String {
        return NSLocalizedString("5ZV-SZ-iab.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func kOoER9gBText(_: Void = ()) -> String {
        return NSLocalizedString("KOo-ER-9gB.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2 Days ago
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func dQfL6LJAText(_: Void = ()) -> String {
        return NSLocalizedString("dQf-l6-lJA.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2 Views
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func gnUTbAluText(_: Void = ()) -> String {
        return NSLocalizedString("GnU-Tb-alu.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func edyVL79OText(_: Void = ()) -> String {
        return NSLocalizedString("edy-VL-79O.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func fEuWGHAPText(_: Void = ()) -> String {
        return NSLocalizedString("fEu-wG-HAP.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func fSNK73ZText(_: Void = ()) -> String {
        return NSLocalizedString("9fS-NK-73Z.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func fxDAE1FText(_: Void = ()) -> String {
        return NSLocalizedString("2Fx-dA-e1F.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func hlTo6DJText(_: Void = ()) -> String {
        return NSLocalizedString("5Hl-to-6DJ.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func iuDJuGwaText(_: Void = ()) -> String {
        return NSLocalizedString("IuD-Ju-Gwa.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func izgTzXLWText(_: Void = ()) -> String {
        return NSLocalizedString("izg-Tz-XLW.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func pwMQOGWrText(_: Void = ()) -> String {
        return NSLocalizedString("pwM-QO-GWr.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func qquE0KwWText(_: Void = ()) -> String {
        return NSLocalizedString("Qqu-E0-kwW.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func sxgWO3G1Text(_: Void = ()) -> String {
        return NSLocalizedString("sxg-WO-3G1.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func tBa7Text(_: Void = ()) -> String {
        return NSLocalizedString("583-1T-ba7.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func wmCDhSaxText(_: Void = ()) -> String {
        return NSLocalizedString("WmC-dh-sax.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func zjQSmCzSText(_: Void = ()) -> String {
        return NSLocalizedString("zjQ-sm-czS.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func nDm2ZHeBText(_: Void = ()) -> String {
        return NSLocalizedString("nDm-2Z-heB.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func uQLG9OppText(_: Void = ()) -> String {
        return NSLocalizedString("uQL-g9-Opp.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func wEsTnVsHText(_: Void = ()) -> String {
        return NSLocalizedString("WEs-tn-vsH.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func wURGCUGWText(_: Void = ()) -> String {
        return NSLocalizedString("wUR-gC-uGW.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 4 D
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func xcAMKL12Text(_: Void = ()) -> String {
        return NSLocalizedString("xcA-MK-L12.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: A verification email has been sent to your email account.Please check
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func k23DM7CpText(_: Void = ()) -> String {
        return NSLocalizedString("K23-dM-7Cp.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ALIVE | CANADA 4K
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func eaXOFkyText(_: Void = ()) -> String {
        return NSLocalizedString("0ea-xO-fky.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: About us
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func qm0MSSBeNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Qm0-mS-SBe.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Account and Profile
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func igoyrBxText(_: Void = ()) -> String {
        return NSLocalizedString("4IG-OY-rBx.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add To
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func ok47vAeIText(_: Void = ()) -> String {
        return NSLocalizedString("Ok4-7v-AeI.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: All Channels
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func kvkJcHRCNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("KVK-jc-hRC.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure you want to delete this account from PlayTube
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func nv4zPfjText(_: Void = ()) -> String {
        return NSLocalizedString("7nv-4z-Pfj.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure you want to delete this playlist
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func isCyO3FText(_: Void = ()) -> String {
        return NSLocalizedString("6is-Cy-o3F.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure you want to logout ?
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func wylRCGZjText(_: Void = ()) -> String {
        return NSLocalizedString("wyl-rC-gZj.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Avatar & Cover
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func smKViCREText(_: Void = ()) -> String {
        return NSLocalizedString("SmK-vi-cRE.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CANCEL
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func bzLMnNl2NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("BzL-Mn-Nl2.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CANCEL
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func ecc3j4NhNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Ecc-3j-4Nh.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CANCEL
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func l4GJ6XaaNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("l4G-J6-xaa.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CANCEL
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func o2NBrMeFNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("O2N-br-meF.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CANCEL
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func soffi4niNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("SOF-fI-4ni.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CANCEL
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func vhhTLEdwNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Vhh-TL-edw.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CREATE NEW!
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func cKqAnQ14NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("cKq-An-q14.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Category
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func kn4A9XTtText(_: Void = ()) -> String {
        return NSLocalizedString("kn4-a9-XTt.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Change Image Avatar
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func nci1EGdcText(_: Void = ()) -> String {
        return NSLocalizedString("nci-1E-Gdc.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Change Image Cover
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func wzzAQUgfText(_: Void = ()) -> String {
        return NSLocalizedString("Wzz-aQ-ugf.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Change your password
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func hoqTsOS5Text(_: Void = ()) -> String {
        return NSLocalizedString("hoq-Ts-oS5.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Clear Cache
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func cz5NhCF5Text(_: Void = ()) -> String {
        return NSLocalizedString("Cz5-Nh-cF5.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Clear videos watched while signed out on this device. This will also clear your watch history.
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func fVh2gJ1JText(_: Void = ()) -> String {
        return NSLocalizedString("fVh-2g-j1J.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Clear watched history
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func pg1IDUtqText(_: Void = ()) -> String {
        return NSLocalizedString("Pg1-ID-utq.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Password
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func ghiG92d2Placeholder(_: Void = ()) -> String {
        return NSLocalizedString("Ghi-g9-2d2.placeholder", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func cv2CPC9dText(_: Void = ()) -> String {
        return NSLocalizedString("cv2-CP-c9d.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func fmjJ7ZFXText(_: Void = ()) -> String {
        return NSLocalizedString("fmj-j7-zFX.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func j1S8ZokText(_: Void = ()) -> String {
        return NSLocalizedString("0j1-s8-Zok.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func peoCk6uzText(_: Void = ()) -> String {
        return NSLocalizedString("peo-ck-6uz.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deandoughouz
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func iHi1C9fhText(_: Void = ()) -> String {
        return NSLocalizedString("IHi-1C-9fh.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deandoughouz
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func rdnHtMDxText(_: Void = ()) -> String {
        return NSLocalizedString("Rdn-ht-MDx.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete Account
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func engEjBoqNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("eng-ej-Boq.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Display your app Language
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func ffYZUYkIText(_: Void = ()) -> String {
        return NSLocalizedString("ffY-ZU-ykI.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Don't have any videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func cJH7qCtLText(_: Void = ()) -> String {
        return NSLocalizedString("cJH-7q-CtL.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Don't have any videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func hKjUEZlrText(_: Void = ()) -> String {
        return NSLocalizedString("HKj-UE-zlr.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: EDIT
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func fKKVWH9cNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("fKK-VW-h9c.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Email
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func wCO3KJ2dPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("wCO-3K-J2d.placeholder", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Empty
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func cFUzYscText(_: Void = ()) -> String {
        return NSLocalizedString("7cF-uz-Ysc.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Empty Playlist
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func bIXDRHzdText(_: Void = ()) -> String {
        return NSLocalizedString("bIX-DR-hzd.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Empty Videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func nfllgr8tText(_: Void = ()) -> String {
        return NSLocalizedString("NFL-lG-r8t.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Empty Videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func qWtNkTv6Text(_: Void = ()) -> String {
        return NSLocalizedString("QWt-nk-tv6.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Empty Videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func stSCGIdpText(_: Void = ()) -> String {
        return NSLocalizedString("stS-cG-idp.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Empty Videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func w9BFP3NRText(_: Void = ()) -> String {
        return NSLocalizedString("w9B-FP-3NR.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enjoy your favourite videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func e6zPhKm5Text(_: Void = ()) -> String {
        return NSLocalizedString("e6z-Ph-Km5.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter My Channel
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func x4VW1NzeText(_: Void = ()) -> String {
        return NSLocalizedString("X4V-W1-nze.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Female
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func vsVMNMO5Text(_: Void = ()) -> String {
        return NSLocalizedString("vsV-MN-mO5.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: First Name
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func kXzTrPwPPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("KXz-tr-PwP.placeholder", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: General
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func dMr40WI9Text(_: Void = ()) -> String {
        return NSLocalizedString("DMr-40-wI9.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Go back and watch any video you want 
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func b2E7edText(_: Void = ()) -> String {
        return NSLocalizedString("23B-2E-7ed.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Go back and watch any video you want 
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func yHkAiSywText(_: Void = ()) -> String {
        return NSLocalizedString("yHk-ai-syw.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Help
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func l7w7kT5bNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("L7w-7k-T5b.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: History & Privacy
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func xa95WBrxText(_: Void = ()) -> String {
        return NSLocalizedString("xa9-5W-Brx.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func fuLLVObKText(_: Void = ()) -> String {
        return NSLocalizedString("FuL-LV-obK.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func idrFtWJhText(_: Void = ()) -> String {
        return NSLocalizedString("idr-ft-WJh.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func jksRXJYdText(_: Void = ()) -> String {
        return NSLocalizedString("Jks-RX-JYd.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func k0V92FfsText(_: Void = ()) -> String {
        return NSLocalizedString("k0V-92-ffs.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: LOGIN
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func dB4ZbGtjNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("dB4-Zb-gtj.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func bMbAFNhfText(_: Void = ()) -> String {
        return NSLocalizedString("bMb-aF-nhf.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func bSo0y8TNText(_: Void = ()) -> String {
        return NSLocalizedString("bSo-0y-8TN.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func bUtWo0qaText(_: Void = ()) -> String {
        return NSLocalizedString("bUt-Wo-0qa.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func bp8XiHText(_: Void = ()) -> String {
        return NSLocalizedString("07B-P8-xiH.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func cB4SMAqyText(_: Void = ()) -> String {
        return NSLocalizedString("cB4-sM-Aqy.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func cQFKdBk1Text(_: Void = ()) -> String {
        return NSLocalizedString("cQF-Kd-bk1.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func cquVIXcbText(_: Void = ()) -> String {
        return NSLocalizedString("cqu-VI-xcb.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func czEMDtrText(_: Void = ()) -> String {
        return NSLocalizedString("2cz-eM-Dtr.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func dkv9THpeText(_: Void = ()) -> String {
        return NSLocalizedString("Dkv-9T-Hpe.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func drHFDJcdText(_: Void = ()) -> String {
        return NSLocalizedString("drH-fD-jcd.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func eILPP0e1Text(_: Void = ()) -> String {
        return NSLocalizedString("eIL-pP-0e1.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func epFsHKXText(_: Void = ()) -> String {
        return NSLocalizedString("5ep-fs-hKX.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func fcHwPimText(_: Void = ()) -> String {
        return NSLocalizedString("9Fc-hw-pim.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func gbONZCdJText(_: Void = ()) -> String {
        return NSLocalizedString("GbO-NZ-cdJ.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func iV68NMkText(_: Void = ()) -> String {
        return NSLocalizedString("6iV-68-NMk.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func jEmQrCMzText(_: Void = ()) -> String {
        return NSLocalizedString("jEm-qr-CMz.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func jyaEQJ6NText(_: Void = ()) -> String {
        return NSLocalizedString("Jya-eQ-J6N.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func kEzIYZcNText(_: Void = ()) -> String {
        return NSLocalizedString("KEz-IY-ZcN.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func l8OXETJxText(_: Void = ()) -> String {
        return NSLocalizedString("l8O-xE-TJx.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func m0vOiBVZText(_: Void = ()) -> String {
        return NSLocalizedString("M0v-Oi-bVZ.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func m9YXk4udText(_: Void = ()) -> String {
        return NSLocalizedString("M9Y-Xk-4ud.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func mGNY87gfText(_: Void = ()) -> String {
        return NSLocalizedString("mGN-Y8-7gf.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func mv3B1B1Text(_: Void = ()) -> String {
        return NSLocalizedString("4MV-3B-1B1.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func nQGVLOsYText(_: Void = ()) -> String {
        return NSLocalizedString("nQG-vL-osY.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func oqlHCD4KText(_: Void = ()) -> String {
        return NSLocalizedString("oql-hC-d4K.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func oxIYNNoIText(_: Void = ()) -> String {
        return NSLocalizedString("oxI-yN-noI.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func psSGuNaYText(_: Void = ()) -> String {
        return NSLocalizedString("psS-gu-naY.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func q7qQCTV8Text(_: Void = ()) -> String {
        return NSLocalizedString("Q7q-qC-TV8.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func qeDCjQsyText(_: Void = ()) -> String {
        return NSLocalizedString("qeD-cj-Qsy.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func qtkhnsl1Text(_: Void = ()) -> String {
        return NSLocalizedString("QTK-hN-SL1.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func qw4HlT8dText(_: Void = ()) -> String {
        return NSLocalizedString("QW4-hl-t8d.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func rLs6JXzDText(_: Void = ()) -> String {
        return NSLocalizedString("RLs-6J-xzD.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func rr8XQ63SText(_: Void = ()) -> String {
        return NSLocalizedString("rr8-xQ-63S.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func sKQyITZText(_: Void = ()) -> String {
        return NSLocalizedString("1sK-qy-iTZ.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func saiSrHwtText(_: Void = ()) -> String {
        return NSLocalizedString("Sai-sr-Hwt.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func txGWjJHfText(_: Void = ()) -> String {
        return NSLocalizedString("TxG-wj-jHf.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func ty6OBUDHText(_: Void = ()) -> String {
        return NSLocalizedString("ty6-OB-UDH.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func uYsKvHevText(_: Void = ()) -> String {
        return NSLocalizedString("UYs-kv-Hev.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func va3Y1J73Text(_: Void = ()) -> String {
        return NSLocalizedString("Va3-Y1-j73.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func vqLxZfnText(_: Void = ()) -> String {
        return NSLocalizedString("5VQ-Lx-Zfn.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func wh7U2QTtText(_: Void = ()) -> String {
        return NSLocalizedString("Wh7-u2-QTt.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func xhAFa82IText(_: Void = ()) -> String {
        return NSLocalizedString("xhA-fa-82I.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Language
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func tgB8oIkpText(_: Void = ()) -> String {
        return NSLocalizedString("tgB-8o-Ikp.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Language
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func vGcNXJhyText(_: Void = ()) -> String {
        return NSLocalizedString("VGc-nX-jhy.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Last Name
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func y4UFfAOmPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("y4U-ff-aOm.placeholder", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Latest Videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func k6IiEw6NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("9k6-ii-ew6.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Library
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func gId6NPKtTitle(_: Void = ()) -> String {
        return NSLocalizedString("GId-6N-PKt.title", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Logout
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func aBSSfO4RNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("aBS-sf-o4R.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Male
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func pd92x14aText(_: Void = ()) -> String {
        return NSLocalizedString("pd9-2x-14a.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: More
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func q1EL3Cm5Title(_: Void = ()) -> String {
        return NSLocalizedString("Q1E-l3-cm5.title", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: More
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func r66AZWPfTitle(_: Void = ()) -> String {
        return NSLocalizedString("R66-aZ-WPf.title", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New Password
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func nHENYKBBPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("nHE-nY-KBB.placeholder", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Night Mode
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func wC7DJ68hText(_: Void = ()) -> String {
        return NSLocalizedString("wC7-DJ-68h.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No Replies
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func zus0vPOJText(_: Void = ()) -> String {
        return NSLocalizedString("ZUS-0v-pOJ.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No videos found for now!
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func akZE9XozText(_: Void = ()) -> String {
        return NSLocalizedString("AkZ-E9-Xoz.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No videos found for now!
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func gi5MwWKnText(_: Void = ()) -> String {
        return NSLocalizedString("GI5-Mw-wKn.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No videos found for now!
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func hCwBI95uText(_: Void = ()) -> String {
        return NSLocalizedString("hCw-bI-95u.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No videos found for now!
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func hWf8xUwXText(_: Void = ()) -> String {
        return NSLocalizedString("hWf-8x-uwX.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No videos found for now!
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func nlzyaIcEText(_: Void = ()) -> String {
        return NSLocalizedString("NLZ-YA-IcE.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func aTrCCGTrNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("aTr-CC-GTr.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func lzvRN2gaNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Lzv-rN-2ga.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func qzvTb7asNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("qzv-tb-7as.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func ssHDw6NzNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("ssH-Dw-6Nz.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Other
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func rkHNaYGtText(_: Void = ()) -> String {
        return NSLocalizedString("rkH-na-YGt.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func ohfW1YjqText(_: Void = ()) -> String {
        return NSLocalizedString("ohf-w1-yjq.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pause watch history
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func hTvLHVShText(_: Void = ()) -> String {
        return NSLocalizedString("HTv-lH-vSh.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PlayTube
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func r5dT2Fq2Text(_: Void = ()) -> String {
        return NSLocalizedString("R5d-T2-fq2.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Playlist name
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func bh78URMYPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("bh7-8U-RMY.placeholder", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please write a summary of what this video was about 
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func oVKDUW8iText(_: Void = ()) -> String {
        return NSLocalizedString("oVK-dU-w8i.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Private
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func uLbQe3JEText(_: Void = ()) -> String {
        return NSLocalizedString("ULb-qe-3JE.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Public
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func fblQJT9KText(_: Void = ()) -> String {
        return NSLocalizedString("fbl-QJ-t9K.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Published on 
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func m2M8ActText(_: Void = ()) -> String {
        return NSLocalizedString("0m2-M8-Act.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Repeat Password
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func yOKL5gPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("35y-oK-l5g.placeholder", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Report This Video
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func dmBYd7RSText(_: Void = ()) -> String {
        return NSLocalizedString("dmB-yd-7RS.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SUBMIT
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func tgoXrRd7NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("TGO-xr-Rd7.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func pgCJ63eFTitle(_: Void = ()) -> String {
        return NSLocalizedString("PgC-J6-3eF.title", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func ucMHVDZZTitle(_: Void = ()) -> String {
        return NSLocalizedString("UcM-hV-DZZ.title", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select a Playlist
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func mSuAyNLWText(_: Void = ()) -> String {
        return NSLocalizedString("MSu-Ay-nLW.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func azx6MRzIText(_: Void = ()) -> String {
        return NSLocalizedString("Azx-6M-RzI.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign in to access video that you have liked or saved
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func fyQRjVybText(_: Void = ()) -> String {
        return NSLocalizedString("FyQ-Rj-vyb.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Social LInks
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func fb1nSkpText(_: Void = ()) -> String {
        return NSLocalizedString("9fb-1n-Skp.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Subscribe to your favorite channels to get notified about their lastest videos.
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func eScOF6mlText(_: Void = ()) -> String {
        return NSLocalizedString("eSc-oF-6ml.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Subscribed
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func krxPD3MANormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Krx-PD-3MA.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Support
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func iGREKT3dText(_: Void = ()) -> String {
        return NSLocalizedString("iGR-eK-T3d.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Terms of use
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func oj9FnH2uNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("OJ9-Fn-H2u.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Top Videos
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func pLnCIELxNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("PLn-CI-eLx.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: UserName
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func adH04ItoText(_: Void = ()) -> String {
        return NSLocalizedString("adH-04-Ito.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: UserName
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func lUMAqGZaText(_: Void = ()) -> String {
        return NSLocalizedString("lUM-aq-GZa.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Username
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func gawDqRvlPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("gaw-dq-Rvl.placeholder", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View More
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func a8YO7XQiNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("a8Y-o7-XQi.normalTitle", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Warning 
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func k9rBxX7HText(_: Void = ()) -> String {
        return NSLocalizedString("K9r-Bx-X7H.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Warning 
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func skSZAH6GText(_: Void = ()) -> String {
        return NSLocalizedString("SkS-ZA-H6G.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Warning 
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func uNBPtBZLText(_: Void = ()) -> String {
        return NSLocalizedString("uNB-Pt-bZL.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Warning 
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func w8AFJO4Text(_: Void = ()) -> String {
        return NSLocalizedString("1W8-aF-jO4.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Watch Later
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func jr2OhRNfText(_: Void = ()) -> String {
        return NSLocalizedString("Jr2-oh-rNf.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You need to login first
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func rmZbFRWText(_: Void = ()) -> String {
        return NSLocalizedString("4rm-Zb-fRW.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your notifications live here
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func ae4LuGIfText(_: Void = ()) -> String {
        return NSLocalizedString("ae4-lu-gIf.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: albel
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func dt4FK0adText(_: Void = ()) -> String {
        return NSLocalizedString("DT4-fK-0ad.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: comment Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func k5ZDTZWaText(_: Void = ()) -> String {
        return NSLocalizedString("k5Z-dT-zWa.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: comment Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func wZJ0PlAText(_: Void = ()) -> String {
        return NSLocalizedString("7wZ-j0-PlA.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: comment Label
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func yohCg9tnText(_: Void = ()) -> String {
        return NSLocalizedString("Yoh-Cg-9tn.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: harisbutt
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func dhWSmP2JText(_: Void = ()) -> String {
        return NSLocalizedString("DhW-Sm-P2J.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: harisbutt
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func tiJsYGAText(_: Void = ()) -> String {
        return NSLocalizedString("4Ti-js-yGA.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: harisbutt
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func ynzCxU4JText(_: Void = ()) -> String {
        return NSLocalizedString("ynz-Cx-U4J.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: share
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func m7AhPhNText(_: Void = ()) -> String {
        return NSLocalizedString("4m7-Ah-phN.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: |
      /// 
      /// Locales: en, ru, ar, de, el, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr, es
      static func yiM74XIuText(_: Void = ()) -> String {
        return NSLocalizedString("yiM-74-XIu.text", tableName: "LoggedInTabbar", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.tabbar` struct is generated, and contains static references to 49 localization keys.
    struct tabbar {
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let bcrRI04BText = Rswift.StringResource(key: "Bcr-rI-04B.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let lq4XHIUWText = Rswift.StringResource(key: "Lq4-xH-iUW.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let moaAkKXvText = Rswift.StringResource(key: "MOA-Ak-kXv.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let olqfkn5lText = Rswift.StringResource(key: "OLQ-fK-N5l.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let om2GeSKDText = Rswift.StringResource(key: "OM2-Ge-SKD.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let sRvPgSQbText = Rswift.StringResource(key: "SRv-pg-sQb.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let wo0HZFQHText = Rswift.StringResource(key: "wo0-HZ-FQH.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let xueIdATAText = Rswift.StringResource(key: "XUE-Id-aTA.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let yNeEaCText = Rswift.StringResource(key: "94Y-ne-eaC.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let l51cPRWText = Rswift.StringResource(key: "9l5-1c-pRW.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let lAzX6WText = Rswift.StringResource(key: "91L-az-x6W.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let lf1MhL3IText = Rswift.StringResource(key: "LF1-mh-L3I.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let rEvP3AliText = Rswift.StringResource(key: "rEv-p3-Ali.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let uQEHg6QOText = Rswift.StringResource(key: "uQE-Hg-6QO.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let uuUWg9PYText = Rswift.StringResource(key: "uuU-Wg-9PY.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: ALIVE | CANADA 4K
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let eHxMwKfgText = Rswift.StringResource(key: "eHx-Mw-kfg.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: ALIVE | CANADA 4K
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let uJPLh3ZjText = Rswift.StringResource(key: "uJP-Lh-3Zj.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: ALIVE | CANADA 4K
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let w76ACLaiText = Rswift.StringResource(key: "w76-AC-lai.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let fZxX5LvRText = Rswift.StringResource(key: "fZx-x5-LvR.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let gJnQsU63Text = Rswift.StringResource(key: "GJn-Qs-u63.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let izXAiL6xText = Rswift.StringResource(key: "izX-Ai-L6x.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let koYAz2JcText = Rswift.StringResource(key: "koY-az-2Jc.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let nifGwPyBText = Rswift.StringResource(key: "Nif-gw-PyB.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let ywnajAi3Text = Rswift.StringResource(key: "YWN-AJ-ai3.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Deandoughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let iwoHSSmJText = Rswift.StringResource(key: "iwo-HS-SmJ.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Deandoughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let nQPT4LL7Text = Rswift.StringResource(key: "nQP-T4-lL7.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Deandoughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let pc8I6YPbText = Rswift.StringResource(key: "Pc8-i6-yPb.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let exSZtVynText = Rswift.StringResource(key: "ExS-zt-Vyn.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let fQ36x0coText = Rswift.StringResource(key: "fQ3-6x-0co.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let g0WkXvUText = Rswift.StringResource(key: "9g0-wk-xvU.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let i6pOqJAeText = Rswift.StringResource(key: "I6p-Oq-JAe.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let mwOLNOYText = Rswift.StringResource(key: "5mw-OL-nOY.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let nUxHc6bvText = Rswift.StringResource(key: "nUx-hc-6bv.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let g3jJHQ2zText = Rswift.StringResource(key: "g3j-JH-q2z.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let gXm902DRText = Rswift.StringResource(key: "gXm-90-2DR.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let ghX8PText = Rswift.StringResource(key: "510-Gh-x8P.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let hmPTy9MgText = Rswift.StringResource(key: "hmP-ty-9Mg.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let mERTZQ5YText = Rswift.StringResource(key: "mER-tZ-Q5Y.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let oQkF2Ct2Text = Rswift.StringResource(key: "OQk-f2-ct2.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let qQj4mOL5Text = Rswift.StringResource(key: "QQj-4m-OL5.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let y3nNP2dQText = Rswift.StringResource(key: "y3n-NP-2dQ.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let zuVYGNw7Text = Rswift.StringResource(key: "zuV-yG-Nw7.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Latest Videos
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let bdC76SvYNormalTitle = Rswift.StringResource(key: "BdC-76-svY.normalTitle", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Latest Videos
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let cJ0KcNm8NormalTitle = Rswift.StringResource(key: "cJ0-kc-Nm8.normalTitle", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Latest Videos
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let pcPKMIw2NormalTitle = Rswift.StringResource(key: "PcP-kM-iw2.normalTitle", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Top Videos
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let dX6X8El9NormalTitle = Rswift.StringResource(key: "dX6-X8-el9.normalTitle", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Top Videos
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let ei2EaXs8NormalTitle = Rswift.StringResource(key: "Ei2-ea-xs8.normalTitle", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: Top Videos
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let yuvc3E04NormalTitle = Rswift.StringResource(key: "YUV-c3-e04.normalTitle", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      /// en translation: harisbutt
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static let tQmSO3YaText = Rswift.StringResource(key: "TQm-SO-3Ya.text", tableName: "Tabbar", bundle: R.hostingBundle, locales: ["en", "ru", "ar", "de", "el", "es", "fr", "it", "ja", "nl", "pt-PT", "ro", "sq", "sr", "th", "tr"], comment: nil)
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func bcrRI04BText(_: Void = ()) -> String {
        return NSLocalizedString("Bcr-rI-04B.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func lq4XHIUWText(_: Void = ()) -> String {
        return NSLocalizedString("Lq4-xH-iUW.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func moaAkKXvText(_: Void = ()) -> String {
        return NSLocalizedString("MOA-Ak-kXv.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func olqfkn5lText(_: Void = ()) -> String {
        return NSLocalizedString("OLQ-fK-N5l.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func om2GeSKDText(_: Void = ()) -> String {
        return NSLocalizedString("OM2-Ge-SKD.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func sRvPgSQbText(_: Void = ()) -> String {
        return NSLocalizedString("SRv-pg-sQb.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func wo0HZFQHText(_: Void = ()) -> String {
        return NSLocalizedString("wo0-HZ-FQH.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func xueIdATAText(_: Void = ()) -> String {
        return NSLocalizedString("XUE-Id-aTA.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2:45
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func yNeEaCText(_: Void = ()) -> String {
        return NSLocalizedString("94Y-ne-eaC.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func l51cPRWText(_: Void = ()) -> String {
        return NSLocalizedString("9l5-1c-pRW.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func lAzX6WText(_: Void = ()) -> String {
        return NSLocalizedString("91L-az-x6W.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func lf1MhL3IText(_: Void = ()) -> String {
        return NSLocalizedString("LF1-mh-L3I.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func rEvP3AliText(_: Void = ()) -> String {
        return NSLocalizedString("rEv-p3-Ali.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func uQEHg6QOText(_: Void = ()) -> String {
        return NSLocalizedString("uQE-Hg-6QO.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 3285 Views
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func uuUWg9PYText(_: Void = ()) -> String {
        return NSLocalizedString("uuU-Wg-9PY.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ALIVE | CANADA 4K
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func eHxMwKfgText(_: Void = ()) -> String {
        return NSLocalizedString("eHx-Mw-kfg.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ALIVE | CANADA 4K
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func uJPLh3ZjText(_: Void = ()) -> String {
        return NSLocalizedString("uJP-Lh-3Zj.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ALIVE | CANADA 4K
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func w76ACLaiText(_: Void = ()) -> String {
        return NSLocalizedString("w76-AC-lai.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func fZxX5LvRText(_: Void = ()) -> String {
        return NSLocalizedString("fZx-x5-LvR.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func gJnQsU63Text(_: Void = ()) -> String {
        return NSLocalizedString("GJn-Qs-u63.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func izXAiL6xText(_: Void = ()) -> String {
        return NSLocalizedString("izX-Ai-L6x.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func koYAz2JcText(_: Void = ()) -> String {
        return NSLocalizedString("koY-az-2Jc.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func nifGwPyBText(_: Void = ()) -> String {
        return NSLocalizedString("Nif-gw-PyB.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dean Doughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func ywnajAi3Text(_: Void = ()) -> String {
        return NSLocalizedString("YWN-AJ-ai3.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deandoughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func iwoHSSmJText(_: Void = ()) -> String {
        return NSLocalizedString("iwo-HS-SmJ.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deandoughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func nQPT4LL7Text(_: Void = ()) -> String {
        return NSLocalizedString("nQP-T4-lL7.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deandoughouz
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func pc8I6YPbText(_: Void = ()) -> String {
        return NSLocalizedString("Pc8-i6-yPb.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func exSZtVynText(_: Void = ()) -> String {
        return NSLocalizedString("ExS-zt-Vyn.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func fQ36x0coText(_: Void = ()) -> String {
        return NSLocalizedString("fQ3-6x-0co.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func g0WkXvUText(_: Void = ()) -> String {
        return NSLocalizedString("9g0-wk-xvU.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func i6pOqJAeText(_: Void = ()) -> String {
        return NSLocalizedString("I6p-Oq-JAe.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func mwOLNOYText(_: Void = ()) -> String {
        return NSLocalizedString("5mw-OL-nOY.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Justice League | Offical Trailer Corporative
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func nUxHc6bvText(_: Void = ()) -> String {
        return NSLocalizedString("nUx-hc-6bv.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func g3jJHQ2zText(_: Void = ()) -> String {
        return NSLocalizedString("g3j-JH-q2z.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func gXm902DRText(_: Void = ()) -> String {
        return NSLocalizedString("gXm-90-2DR.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func ghX8PText(_: Void = ()) -> String {
        return NSLocalizedString("510-Gh-x8P.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func hmPTy9MgText(_: Void = ()) -> String {
        return NSLocalizedString("hmP-ty-9Mg.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func mERTZQ5YText(_: Void = ()) -> String {
        return NSLocalizedString("mER-tZ-Q5Y.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func oQkF2Ct2Text(_: Void = ()) -> String {
        return NSLocalizedString("OQk-f2-ct2.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func qQj4mOL5Text(_: Void = ()) -> String {
        return NSLocalizedString("QQj-4m-OL5.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func y3nNP2dQText(_: Void = ()) -> String {
        return NSLocalizedString("y3n-NP-2dQ.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func zuVYGNw7Text(_: Void = ()) -> String {
        return NSLocalizedString("zuV-yG-Nw7.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Latest Videos
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func bdC76SvYNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("BdC-76-svY.normalTitle", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Latest Videos
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func cJ0KcNm8NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("cJ0-kc-Nm8.normalTitle", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Latest Videos
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func pcPKMIw2NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("PcP-kM-iw2.normalTitle", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Top Videos
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func dX6X8El9NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("dX6-X8-el9.normalTitle", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Top Videos
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func ei2EaXs8NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Ei2-ea-xs8.normalTitle", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Top Videos
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func yuvc3E04NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("YUV-c3-e04.normalTitle", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: harisbutt
      /// 
      /// Locales: en, ru, ar, de, el, es, fr, it, ja, nl, pt-PT, ro, sq, sr, th, tr
      static func tQmSO3YaText(_: Void = ()) -> String {
        return NSLocalizedString("TQm-SO-3Ya.text", tableName: "Tabbar", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CoverA.validate()
      try _CustomTextField.validate()
    }
    
    struct _CoverA: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CoverA"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoverA? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoverA
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_action_ic_fullscreen_expand", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_ic_fullscreen_expand' is used in nib 'CoverA', but couldn't be loaded.") }
        if UIKit.UIImage(named: "play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play' is used in nib 'CoverA', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CustomTextField: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CustomTextField"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "log_in_user_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'log_in_user_icon' is used in nib 'CustomTextField', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeXibCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeXibCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Home_CollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Home_CollectionCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try auth.validate()
      try launchScreen.validate()
      try loggedInTabbar.validate()
      try tabbar.validate()
    }
    
    struct auth: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let forgetPasswordVC = StoryboardViewControllerResource<ForgetPasswordVC>(identifier: "ForgetPasswordVC")
      let introDuctionVC = StoryboardViewControllerResource<IntroDuctionVC>(identifier: "IntroDuctionVC")
      let login = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "Login")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let name = "Auth"
      let registerVC = StoryboardViewControllerResource<RegisterVC>(identifier: "RegisterVC")
      
      func forgetPasswordVC(_: Void = ()) -> ForgetPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgetPasswordVC)
      }
      
      func introDuctionVC(_: Void = ()) -> IntroDuctionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: introDuctionVC)
      }
      
      func login(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: login)
      }
      
      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }
      
      func registerVC(_: Void = ()) -> RegisterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "emailIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'emailIcon' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "googleIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'googleIcon' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logInScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logInScreen' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mainLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mainLogo' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "passIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'passIcon' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unCheckBox", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unCheckBox' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "userIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userIcon' is used in storyboard 'Auth', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.auth().forgetPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgetPasswordVC' could not be loaded from storyboard 'Auth' as 'ForgetPasswordVC'.") }
        if _R.storyboard.auth().introDuctionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'introDuctionVC' could not be loaded from storyboard 'Auth' as 'IntroDuctionVC'.") }
        if _R.storyboard.auth().login() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Auth' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.auth().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Auth' as 'LoginVC'.") }
        if _R.storyboard.auth().registerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerVC' could not be loaded from storyboard 'Auth' as 'RegisterVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "splashScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splashScreen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct loggedInTabbar: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabbarVC
      
      let aboutVC = StoryboardViewControllerResource<AboutVC>(identifier: "AboutVC")
      let articlesDetailsVC = StoryboardViewControllerResource<ArticlesDetailsVC>(identifier: "ArticlesDetailsVC")
      let bundle = R.hostingBundle
      let changeLanguageVC = StoryboardViewControllerResource<ChangeLanguageVC>(identifier: "ChangeLanguageVC")
      let changePasswordVC = StoryboardViewControllerResource<ChangePasswordVC>(identifier: "ChangePasswordVC")
      let channelDetailsVC = StoryboardViewControllerResource<ChannelDetailsVC>(identifier: "ChannelDetailsVC")
      let chatsVC = StoryboardViewControllerResource<ChatsVC>(identifier: "ChatsVC")
      let createPlaylistVC = StoryboardViewControllerResource<CreatePlaylistVC>(identifier: "CreatePlaylistVC")
      let deleteAccountVC = StoryboardViewControllerResource<DeleteAccountVC>(identifier: "DeleteAccountVC")
      let deletePlayList = StoryboardViewControllerResource<DeletePlayList>(identifier: "DeletePlayList")
      let editMyChannelVC = StoryboardViewControllerResource<EditMyChannelVC>(identifier: "EditMyChannelVC")
      let emailVerificaionVC = StoryboardViewControllerResource<emailVerificaionVC>(identifier: "emailVerificaionVC")
      let fullScreenVC = StoryboardViewControllerResource<FullScreenVC>(identifier: "FullScreenVC")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let librarySelectVC = StoryboardViewControllerResource<LibrarySelectVC>(identifier: "LibrarySelectVC")
      let libraryVC = StoryboardViewControllerResource<LibraryVC>(identifier: "LibraryVC")
      let logoutVC = StoryboardViewControllerResource<LogoutVC>(identifier: "LogoutVC")
      let monetizationVC = StoryboardViewControllerResource<MonetizationVC>(identifier: "MonetizationVC")
      let myChannelVC = StoryboardViewControllerResource<MyChannelVC>(identifier: "MyChannelVC")
      let name = "LoggedInTabbar"
      let notificationsVC = StoryboardViewControllerResource<NotificationsVC>(identifier: "NotificationsVC")
      let playVideoVC = StoryboardViewControllerResource<PlayVideoVC>(identifier: "PlayVideoVC")
      let playVideo_CommentVC = StoryboardViewControllerResource<PlayVideo_CommentVC>(identifier: "PlayVideo_CommentVC")
      let playVideo_NextToVC = StoryboardViewControllerResource<PlayVideo_NextToVC>(identifier: "PlayVideo_NextToVC")
      let playlistVC = StoryboardViewControllerResource<PlaylistVC>(identifier: "PlaylistVC")
      let playlistVideosVC = StoryboardViewControllerResource<PlaylistVideosVC>(identifier: "PlaylistVideosVC")
      let repliesVC = StoryboardViewControllerResource<RepliesVC>(identifier: "RepliesVC")
      let reportVideoVC = StoryboardViewControllerResource<ReportVideoVC>(identifier: "ReportVideoVC")
      let selectAPlaylistVC = StoryboardViewControllerResource<SelectAPlaylistVC>(identifier: "SelectAPlaylistVC")
      let settingsVC = StoryboardViewControllerResource<SettingsVC>(identifier: "SettingsVC")
      let showLoginPopVC = StoryboardViewControllerResource<ShowLoginPopVC>(identifier: "ShowLoginPopVC")
      let subscribeChannelVC = StoryboardViewControllerResource<SubscribeChannelVC>(identifier: "SubscribeChannelVC")
      let subscriptionVC = StoryboardViewControllerResource<SubscriptionVC>(identifier: "SubscriptionVC")
      let tabbarVC = StoryboardViewControllerResource<TabbarVC>(identifier: "TabbarVC")
      let topAndLatestVideosVC = StoryboardViewControllerResource<TopAndLatestVideosVC>(identifier: "TopAndLatestVideosVC")
      let trendingVC = StoryboardViewControllerResource<TrendingVC>(identifier: "TrendingVC")
      let userChatVC = StoryboardViewControllerResource<UserChatVC>(identifier: "UserChatVC")
      let verificationVC = StoryboardViewControllerResource<VerificationVC>(identifier: "VerificationVC")
      let verifiedVC = StoryboardViewControllerResource<VerifiedVC>(identifier: "VerifiedVC")
      let videosVC = StoryboardViewControllerResource<VideosVC>(identifier: "VideosVC")
      let viewController = StoryboardViewControllerResource<ViewController>(identifier: "ViewController")
      let watchLaterVC = StoryboardViewControllerResource<WatchLaterVC>(identifier: "WatchLaterVC")
      let webViewVC = StoryboardViewControllerResource<WebViewVC>(identifier: "WebViewVC")
      
      func aboutVC(_: Void = ()) -> AboutVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutVC)
      }
      
      func articlesDetailsVC(_: Void = ()) -> ArticlesDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: articlesDetailsVC)
      }
      
      func changeLanguageVC(_: Void = ()) -> ChangeLanguageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changeLanguageVC)
      }
      
      func changePasswordVC(_: Void = ()) -> ChangePasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordVC)
      }
      
      func channelDetailsVC(_: Void = ()) -> ChannelDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: channelDetailsVC)
      }
      
      func chatsVC(_: Void = ()) -> ChatsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatsVC)
      }
      
      func createPlaylistVC(_: Void = ()) -> CreatePlaylistVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createPlaylistVC)
      }
      
      func deleteAccountVC(_: Void = ()) -> DeleteAccountVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deleteAccountVC)
      }
      
      func deletePlayList(_: Void = ()) -> DeletePlayList? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deletePlayList)
      }
      
      func editMyChannelVC(_: Void = ()) -> EditMyChannelVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editMyChannelVC)
      }
      
      func emailVerificaionVC(_: Void = ()) -> emailVerificaionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: emailVerificaionVC)
      }
      
      func fullScreenVC(_: Void = ()) -> FullScreenVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fullScreenVC)
      }
      
      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }
      
      func librarySelectVC(_: Void = ()) -> LibrarySelectVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: librarySelectVC)
      }
      
      func libraryVC(_: Void = ()) -> LibraryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: libraryVC)
      }
      
      func logoutVC(_: Void = ()) -> LogoutVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: logoutVC)
      }
      
      func monetizationVC(_: Void = ()) -> MonetizationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: monetizationVC)
      }
      
      func myChannelVC(_: Void = ()) -> MyChannelVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myChannelVC)
      }
      
      func notificationsVC(_: Void = ()) -> NotificationsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsVC)
      }
      
      func playVideoVC(_: Void = ()) -> PlayVideoVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: playVideoVC)
      }
      
      func playVideo_CommentVC(_: Void = ()) -> PlayVideo_CommentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: playVideo_CommentVC)
      }
      
      func playVideo_NextToVC(_: Void = ()) -> PlayVideo_NextToVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: playVideo_NextToVC)
      }
      
      func playlistVC(_: Void = ()) -> PlaylistVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: playlistVC)
      }
      
      func playlistVideosVC(_: Void = ()) -> PlaylistVideosVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: playlistVideosVC)
      }
      
      func repliesVC(_: Void = ()) -> RepliesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: repliesVC)
      }
      
      func reportVideoVC(_: Void = ()) -> ReportVideoVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: reportVideoVC)
      }
      
      func selectAPlaylistVC(_: Void = ()) -> SelectAPlaylistVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectAPlaylistVC)
      }
      
      func settingsVC(_: Void = ()) -> SettingsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsVC)
      }
      
      func showLoginPopVC(_: Void = ()) -> ShowLoginPopVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showLoginPopVC)
      }
      
      func subscribeChannelVC(_: Void = ()) -> SubscribeChannelVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: subscribeChannelVC)
      }
      
      func subscriptionVC(_: Void = ()) -> SubscriptionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: subscriptionVC)
      }
      
      func tabbarVC(_: Void = ()) -> TabbarVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabbarVC)
      }
      
      func topAndLatestVideosVC(_: Void = ()) -> TopAndLatestVideosVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: topAndLatestVideosVC)
      }
      
      func trendingVC(_: Void = ()) -> TrendingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: trendingVC)
      }
      
      func userChatVC(_: Void = ()) -> UserChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userChatVC)
      }
      
      func verificationVC(_: Void = ()) -> VerificationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: verificationVC)
      }
      
      func verifiedVC(_: Void = ()) -> VerifiedVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: verifiedVC)
      }
      
      func videosVC(_: Void = ()) -> VideosVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: videosVC)
      }
      
      func viewController(_: Void = ()) -> ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewController)
      }
      
      func watchLaterVC(_: Void = ()) -> WatchLaterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: watchLaterVC)
      }
      
      func webViewVC(_: Void = ()) -> WebViewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: webViewVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Cat_Comedy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Cat_Comedy' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Smile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Smile' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "addto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addto' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bell", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bell' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'camera' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "camera-grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'camera-grey' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dislike", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dislike' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "downarrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'downarrow' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "download", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'download' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "email-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'email-1' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "firstname", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'firstname' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "googlePlus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'googlePlus' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_AddVideo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_AddVideo' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_close' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_more' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_notification", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_notification' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_search' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_send' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_articles", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_articles' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_home' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_more' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_mychannel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_mychannel' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_trending", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_trending' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_translation_settings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_translation_settings' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_warning_po", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_warning_po' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lib_subscriptions", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lib_subscriptions' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "male", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'male' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "maxresdefault-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'maxresdefault-1' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "no_profile_image_circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'no_profile_image_circle' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "playlist", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'playlist' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio_button_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio_button_off' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio_button_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio_button_on' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "settings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'settings' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "timer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timer' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "topvideos", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'topvideos' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "twitter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'twitter' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "uncheked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'uncheked' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "verified", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'verified' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "videocamera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'videocamera' is used in storyboard 'LoggedInTabbar', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.loggedInTabbar().aboutVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutVC' could not be loaded from storyboard 'LoggedInTabbar' as 'AboutVC'.") }
        if _R.storyboard.loggedInTabbar().articlesDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'articlesDetailsVC' could not be loaded from storyboard 'LoggedInTabbar' as 'ArticlesDetailsVC'.") }
        if _R.storyboard.loggedInTabbar().changeLanguageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changeLanguageVC' could not be loaded from storyboard 'LoggedInTabbar' as 'ChangeLanguageVC'.") }
        if _R.storyboard.loggedInTabbar().changePasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'LoggedInTabbar' as 'ChangePasswordVC'.") }
        if _R.storyboard.loggedInTabbar().channelDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'channelDetailsVC' could not be loaded from storyboard 'LoggedInTabbar' as 'ChannelDetailsVC'.") }
        if _R.storyboard.loggedInTabbar().chatsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatsVC' could not be loaded from storyboard 'LoggedInTabbar' as 'ChatsVC'.") }
        if _R.storyboard.loggedInTabbar().createPlaylistVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createPlaylistVC' could not be loaded from storyboard 'LoggedInTabbar' as 'CreatePlaylistVC'.") }
        if _R.storyboard.loggedInTabbar().deleteAccountVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deleteAccountVC' could not be loaded from storyboard 'LoggedInTabbar' as 'DeleteAccountVC'.") }
        if _R.storyboard.loggedInTabbar().deletePlayList() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deletePlayList' could not be loaded from storyboard 'LoggedInTabbar' as 'DeletePlayList'.") }
        if _R.storyboard.loggedInTabbar().editMyChannelVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editMyChannelVC' could not be loaded from storyboard 'LoggedInTabbar' as 'EditMyChannelVC'.") }
        if _R.storyboard.loggedInTabbar().fullScreenVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fullScreenVC' could not be loaded from storyboard 'LoggedInTabbar' as 'FullScreenVC'.") }
        if _R.storyboard.loggedInTabbar().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'LoggedInTabbar' as 'HomeVC'.") }
        if _R.storyboard.loggedInTabbar().librarySelectVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'librarySelectVC' could not be loaded from storyboard 'LoggedInTabbar' as 'LibrarySelectVC'.") }
        if _R.storyboard.loggedInTabbar().libraryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'libraryVC' could not be loaded from storyboard 'LoggedInTabbar' as 'LibraryVC'.") }
        if _R.storyboard.loggedInTabbar().logoutVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'logoutVC' could not be loaded from storyboard 'LoggedInTabbar' as 'LogoutVC'.") }
        if _R.storyboard.loggedInTabbar().monetizationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'monetizationVC' could not be loaded from storyboard 'LoggedInTabbar' as 'MonetizationVC'.") }
        if _R.storyboard.loggedInTabbar().myChannelVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myChannelVC' could not be loaded from storyboard 'LoggedInTabbar' as 'MyChannelVC'.") }
        if _R.storyboard.loggedInTabbar().notificationsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsVC' could not be loaded from storyboard 'LoggedInTabbar' as 'NotificationsVC'.") }
        if _R.storyboard.loggedInTabbar().playVideoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'playVideoVC' could not be loaded from storyboard 'LoggedInTabbar' as 'PlayVideoVC'.") }
        if _R.storyboard.loggedInTabbar().playVideo_CommentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'playVideo_CommentVC' could not be loaded from storyboard 'LoggedInTabbar' as 'PlayVideo_CommentVC'.") }
        if _R.storyboard.loggedInTabbar().playVideo_NextToVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'playVideo_NextToVC' could not be loaded from storyboard 'LoggedInTabbar' as 'PlayVideo_NextToVC'.") }
        if _R.storyboard.loggedInTabbar().playlistVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'playlistVC' could not be loaded from storyboard 'LoggedInTabbar' as 'PlaylistVC'.") }
        if _R.storyboard.loggedInTabbar().playlistVideosVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'playlistVideosVC' could not be loaded from storyboard 'LoggedInTabbar' as 'PlaylistVideosVC'.") }
        if _R.storyboard.loggedInTabbar().repliesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'repliesVC' could not be loaded from storyboard 'LoggedInTabbar' as 'RepliesVC'.") }
        if _R.storyboard.loggedInTabbar().reportVideoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'reportVideoVC' could not be loaded from storyboard 'LoggedInTabbar' as 'ReportVideoVC'.") }
        if _R.storyboard.loggedInTabbar().selectAPlaylistVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectAPlaylistVC' could not be loaded from storyboard 'LoggedInTabbar' as 'SelectAPlaylistVC'.") }
        if _R.storyboard.loggedInTabbar().settingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsVC' could not be loaded from storyboard 'LoggedInTabbar' as 'SettingsVC'.") }
        if _R.storyboard.loggedInTabbar().showLoginPopVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showLoginPopVC' could not be loaded from storyboard 'LoggedInTabbar' as 'ShowLoginPopVC'.") }
        if _R.storyboard.loggedInTabbar().subscribeChannelVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'subscribeChannelVC' could not be loaded from storyboard 'LoggedInTabbar' as 'SubscribeChannelVC'.") }
        if _R.storyboard.loggedInTabbar().subscriptionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'subscriptionVC' could not be loaded from storyboard 'LoggedInTabbar' as 'SubscriptionVC'.") }
        if _R.storyboard.loggedInTabbar().tabbarVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabbarVC' could not be loaded from storyboard 'LoggedInTabbar' as 'TabbarVC'.") }
        if _R.storyboard.loggedInTabbar().topAndLatestVideosVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'topAndLatestVideosVC' could not be loaded from storyboard 'LoggedInTabbar' as 'TopAndLatestVideosVC'.") }
        if _R.storyboard.loggedInTabbar().trendingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'trendingVC' could not be loaded from storyboard 'LoggedInTabbar' as 'TrendingVC'.") }
        if _R.storyboard.loggedInTabbar().userChatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userChatVC' could not be loaded from storyboard 'LoggedInTabbar' as 'UserChatVC'.") }
        if _R.storyboard.loggedInTabbar().verificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'verificationVC' could not be loaded from storyboard 'LoggedInTabbar' as 'VerificationVC'.") }
        if _R.storyboard.loggedInTabbar().verifiedVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'verifiedVC' could not be loaded from storyboard 'LoggedInTabbar' as 'VerifiedVC'.") }
        if _R.storyboard.loggedInTabbar().videosVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'videosVC' could not be loaded from storyboard 'LoggedInTabbar' as 'VideosVC'.") }
        if _R.storyboard.loggedInTabbar().viewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewController' could not be loaded from storyboard 'LoggedInTabbar' as 'ViewController'.") }
        if _R.storyboard.loggedInTabbar().watchLaterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'watchLaterVC' could not be loaded from storyboard 'LoggedInTabbar' as 'WatchLaterVC'.") }
        if _R.storyboard.loggedInTabbar().webViewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'webViewVC' could not be loaded from storyboard 'LoggedInTabbar' as 'WebViewVC'.") }
        if _R.storyboard.loggedInTabbar().emailVerificaionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'emailVerificaionVC' could not be loaded from storyboard 'LoggedInTabbar' as 'emailVerificaionVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct tabbar: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabbarVC
      
      let articlesDetailsVC = StoryboardViewControllerResource<ArticlesDetailsVC>(identifier: "ArticlesDetailsVC")
      let bundle = R.hostingBundle
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let name = "Tabbar"
      let tabbarVC = StoryboardViewControllerResource<TabbarVC>(identifier: "TabbarVC")
      let trendingVC = StoryboardViewControllerResource<TrendingVC>(identifier: "TrendingVC")
      
      func articlesDetailsVC(_: Void = ()) -> ArticlesDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: articlesDetailsVC)
      }
      
      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }
      
      func tabbarVC(_: Void = ()) -> TabbarVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabbarVC)
      }
      
      func trendingVC(_: Void = ()) -> TrendingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: trendingVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "chat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dislike", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dislike' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_more' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_send' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_articles", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_articles' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_home' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_more' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_trending", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_trending' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loginPerson", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loginPerson' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "maxresdefault-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'maxresdefault-1' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "timer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timer' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "topvideos", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'topvideos' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "verified", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'verified' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "videocamera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'videocamera' is used in storyboard 'Tabbar', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.tabbar().articlesDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'articlesDetailsVC' could not be loaded from storyboard 'Tabbar' as 'ArticlesDetailsVC'.") }
        if _R.storyboard.tabbar().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Tabbar' as 'HomeVC'.") }
        if _R.storyboard.tabbar().tabbarVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabbarVC' could not be loaded from storyboard 'Tabbar' as 'TabbarVC'.") }
        if _R.storyboard.tabbar().trendingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'trendingVC' could not be loaded from storyboard 'Tabbar' as 'TrendingVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
